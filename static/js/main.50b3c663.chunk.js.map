{"version":3,"sources":["utils/storageUtils.js","api/HTTP.js","api/index.js","redux/reducer.js","redux/action-type.js","redux/action.js","components/header/header.js","components/common/my-dropdown.js","components/common/my-alert.js","components/cars/form-add.js","components/cars/card-form-wrapper-cars.js","components/common/my-carousels.js","components/cars/card-detail-cars.js","components/common/my-search-bar.js","components/cars/search-field.js","components/common/my-pagination.js","components/common/my-spinner.js","components/cars/page-cars.js","components/customers/form-add.js","components/customers/card-form-wrapper-customers.js","components/common/my-table.js","components/customers/page-customers.js","components/items/form-add.js","components/items/card-form-wrapper-items.js","components/items/page-items.js","components/sales/preRowContent.js","components/sales/table-add.js","components/sales/card-form-wrapper-sales.js","components/sales/page-sales.js","components/sales-report/line-chart.js","components/sales-report/bar-chart.js","components/sales-report/card-charts.js","utils/timeUtils.js","components/sales-report/page-sales-report.js","App.js","serviceWorker.js","pages/page-login.js","index.js"],"names":["userid","store","set","get","remove","httpRequest","url","data","type","paramStr","Object","keys","forEach","key","substring","length","axios","fd","FormData","append","i","post","headers","baseUrl","requestLogin","user","requestItemsQuery","queryCondition","requestItemUpdate","item","requestItemDelete","requestCustomersQuery","requestCustomerUpdate","customer","requestCustomerDelete","requestCarsQuery","initUser","initItems","combineReducers","state","action","items","resLogin","Header","props","handleClick","storageUtils","history","replace","logout","navInfo","text","href","isLoading","username","userId","this","setState","then","r","err_code","catch","err","currentPathname","location","pathname","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","className","map","idx","Link","as","to","Text","Button","variant","style","position","marginLeft","disabled","onClick","role","aria-hidden","right","React","Component","connect","dispatch","withRouter","MyDropdown","handleDropDownClick","event","preventDefault","$","target","nextElementSibling","slideToggle","handleDropDownItemClick","userInput","innerText","label","transferMsg","getAttribute","value","parentElement","control","invisibleLabel","dataId","Form","Label","height","cursor","data-id","MyAlert","toggleAlert","alertId","timeStamp","preProps","preStates","s","css","display","width","aria-label","CardFormAdd","msg","ownerId","tmp","jsonData","modelPreContent","informAlert","alert","Date","now","handleChange","e","prevState","assign","car","plateNumber","year","color","owner","brand","model","fromFormToParent","date","getFullYear","carImages","domCloseIcon","document","getElementsByClassName","click","message","console","log","onDrop","picture","requestData","currentPageCount","ownersId","ownersName","customers","push","_id","name","ownersCount","customersCount","brandPreContent","v","myDate","colorPreContent","textAlign","onChange","withIcon","buttonText","imgExtension","maxFileSize","withPreview","Row","CardFormWrapperCars","toggleClass","fromWrapperToParent","Card","Body","MyCarousels","Carousel","interval","imageURLs","Item","minBlockSize","alt","effect","src","Caption","CardDetailCars","MySearchBar","fields","enterTriggerSearch","keyCode","clickTriggerSearch","data-toggle","aria-haspopup","aria-expanded","onKeyUp","SearchField","carPreContent","fromSearchFieldToParent","arrayCopy","ownerPreContent","searchField","searchText","MyPagination","pageCount","parseInt","fromPaginationToParent","dataCount","dataPerPage","totalPagesCount","Math","ceil","arr","startPageCount","endPageCount","count","lastValue","splice","firstValue","unshift","margin","MySpinner","left","bottom","zIndex","PageCars","transferMsgFromPagination","a","cars","carsCount","padding","marginBottom","FormAdd","test","phone","email","top","CardFormWrapperCustomers","cardTitle","MyTable","updateFunc","deleteFunc","idxIsLoading","contents","rowId","tableRole","operatingContent","filter","handleDropDownChange","amount","columnId","Table","hover","responsive","subIdx","indexOf","marginRight","PageCustomer","price","transition","CardFormWrapperItems","PageItems","itemsCount","PreRowContent","index","preMsg","productsName","servicesName","rowIdx","fromPreRowContentToParent","TableAdd","organisingItems","products","services","remainingLoad","requestFail","organisingCustomers","customersName","customersId","_customers","obj","organisingCars","handleNameChange","customerId","currentCustomerCars","currentCustomer","handlePlateChange","isDisableButton","componentWillUnmount","callback","rollBackArray","itemsArr","sort","filterTheArray","remainingAmount","calculateTotalPrice","isVAT","gross","VAT","totalPrice","handleSubmit","itemsId","itemsName","unitPrice","substr","sales","requestSalesInsert","componentDidMount","checked","newMsg","parseFloat","toFixed","submitIsLoading","carsName","modelsName","productsItems","servicesItems","colSpan","initItemsData","CardFormWrapperSales","PageSales","LineChart","labels","datasets","fill","borderColor","flag","options","scales","yAxes","ticks","beginAtZero","BarChart","names","amounts","backgroundColor","borderWidth","CardCharts","lineChartData","barChartData","timeStampToDate","getMonth","getDate","getHours","getMinutes","getSeconds","PageSalesReport","conditions","startDate","endDate","startTimeStamp","getTime","endTimeStamp","organisingChartData","organisingTableData","totalCount","arrLineChartData","objBarChartData","createdTimeStamp","sortedItemsName","b","itemsSoldAmount","dateTime","handleStartDateChange","handleEndDateChange","toggleModal","modalShow","handleRowClick","currentRow","handleModalHide","MyVerticallyCenteredModal","Modal","size","aria-labelledby","centered","closeButton","Title","ListGroup","Footer","onHide","marginTop","clearIcon","maxDate","minDate","rowid","show","App","path","component","Boolean","window","hostname","match","PageLogin","isChecked","password","login","placeholder","createStore","reducer","compose","applyMiddleware","thunk","devToolsExtension","f","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.50b3c663.chunk.js","sourcesContent":["import store from 'store'\n\nconst USERID = 'userid'\nexport default {\n    //保存\n    saveUserId(userid) {\n        // localStorage.setItem(USERID,JSON.stringify(userid))\n        store.set(USERID, userid)\n    },\n    //读取\n    getUserId() {\n        // return JSON.parse(localStorage.getItem(USERID) || '{}')\n        return store.get(USERID) || \"\"\n    },\n    //删除\n    deleteUserId() {\n        // localStorage.removeItem(USERID)\n        store.remove(USERID)\n    }\n}","import axios from 'axios'\n//data: {k: v}\nexport default function httpRequest(url, data, type) {\n    if (type === 'GET') {\n        let paramStr = ''\n        Object.keys(data).forEach(key => {\n            paramStr += key + '=' + data[key] + '&'\n        })\n        if (paramStr) {\n            paramStr = paramStr.substring(0, paramStr.length - 1)\n        }\n        // 使用axios发get请求\n        return axios.get(url + '?' + paramStr)\n        // return axios.get(`${url}?username=${data.username}&password=${data.password}`)\n    } else {\n        if (\"carImages\" in data) {\n            const fd = new FormData()\n            Object.keys(data).forEach(key => {\n                fd.append(key, data[key])\n                if (key === \"carImages\") {\n                    for (let i = 0; i < data[key].length; i++) {\n                        fd.append(key, data[key][i])\n                    }\n                }\n            })\n            return axios.post(url, fd, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n        }\n        return axios.post(url, data)\n    }\n}","import httpRequest from \"./HTTP\";\n// http://34.126.86.176:4000\n// let baseUrl = \"https://e307b1922e60.ngrok.io\"\nlet baseUrl = \"http://127.0.0.1:4000\"\n\nexport const requestRegister = (user) => httpRequest(baseUrl + '/users/register', user, 'POST')\nexport const requestLogin = (user) => httpRequest(baseUrl + '/users/login', user, 'POST')\nexport const requestUserInfo = (userId) => httpRequest(baseUrl + '/users/query', userId, 'POST')\n\nexport const requestItemsQuery = (queryCondition) => httpRequest(baseUrl + '/items/query', queryCondition, 'GET')\nexport const requestItemInsert = (item) => httpRequest(baseUrl + '/items/insert', item, 'GET')\nexport const requestItemUpdate = (item) => httpRequest(baseUrl + '/items/update', item, 'GET')\nexport const requestItemDelete = (item) => httpRequest(baseUrl + '/items/delete', item, 'GET')\n\nexport const requestCustomersQuery = (queryCondition) => httpRequest(baseUrl + '/customers/query', queryCondition, 'GET')\nexport const requestCustomerInsert = (customer) => httpRequest(baseUrl + '/customers/insert', customer, 'GET')\nexport const requestCustomerUpdate = (customer) => httpRequest(baseUrl + '/customers/update', customer, 'GET')\nexport const requestCustomerDelete = (customer) => httpRequest(baseUrl + '/customers/delete', customer, 'GET')\n\nexport const requestCarsQuery = (queryCondition) => httpRequest(baseUrl + '/cars/query', queryCondition,'GET')\nexport const requestCarInsert = (car) => httpRequest(baseUrl + '/cars/insert', car,'POST')\n\nexport const requestSalesQuery = (conditions) => httpRequest(baseUrl + '/sales/query', conditions,'GET')\nexport const requestSalesInsert = (sales) => httpRequest(baseUrl + '/sales/insert', sales,'GET')\n\nexport const requestReadMsg = (from) => httpRequest(baseUrl + '/readMsg',{from},'POST')","import {combineReducers} from \"redux\";\nimport {AUTH_SUCCESS, ERROR_MSG, LOGIN, LOGOUT} from \"./action-type\";\n// import {user} from './action'\n\nconst initUser = {}\n\nexport const user = (state=initUser, action) => {\n    switch (action.type) {\n        case LOGIN:\n            return {...action.data}\n        case LOGOUT:\n            return initUser\n        // case AUTH_SUCCESS:\n        //     // const authSuccess = (user) => ({type: AUTH_SUCCESS, data: user})\n        //     // action.data -> user\n        //     return {...state, user: action.data, errMsg: \"Login success\"}\n        // case ERROR_MSG:\n        //     // const errorMsg = (errMsg) => ({type: ERROR_MSG, data: errMsg})\n        //     // action.data -> errMsg\n        //     return {...state, errMsg: action.data}\n        default:\n            return state\n    }\n}\n\nconst initItems = {}\n\nexport const items = (state=initItems, action) => {\n    switch (action.type) {\n        case \"init\":\n            return {...action.data}\n        default:\n            return state\n    }\n}\n\n// 向外暴露: {user: {}}\nexport default combineReducers({\n    user,\n    items\n})","export const AUTH_SUCCESS = 'auth_success'\nexport const ERROR_MSG = 'error_msg'\nexport const LOGIN = 'login'\nexport const LOGOUT = 'logout'","import {requestLogin} from \"../api\";\nimport {ERROR_MSG, AUTH_SUCCESS, LOGIN, LOGOUT} from \"./action-type\";\nimport {init} from \"http-proxy-middleware/dist/handlers\";\nimport {items} from \"./reducer\";\n\nconst authSuccess = (user) => ({type: AUTH_SUCCESS, data: user})\nconst errorMsg = (errMsg) => ({type: ERROR_MSG, data: errMsg})\nconst resLogin = (data) => ({type: LOGIN, data: data})\nconst resLogout = () => ({type: LOGOUT})\n\nconst initItems = (items) => ({type: \"init\", data: items})\n\nexport const login = (user) => {\n    return async dispatch => {\n        // requestLogin(user).then(r => {}).catch((err) => {})\n        const {data} = await requestLogin(user)\n        dispatch(resLogin(data))\n        // if (data.err_code === 0) {\n        //     dispatch(authSuccess(data))\n        // } else {\n        //     dispatch(errorMsg(data))\n        // }\n    }\n}\n\nexport const logout = () => {\n    return dispatch => {\n        dispatch(resLogout())\n    }\n}\n\nexport const initItemsData = (items) => {\n    return dispatch => {\n        dispatch(\n            initItems(items)\n        )\n    }\n}","import React from 'react';\nimport {Nav, Navbar, Button} from \"react-bootstrap\";\nimport {withRouter, Link} from 'react-router-dom'\nimport storageUtils from \"../../utils/storageUtils\";\nimport {requestUserInfo} from \"../../api\";\nimport {connect} from 'react-redux';\nimport {logout} from \"../../redux/action\"\n\n// 每个组件有个prop，prop可以通过'prop.'的方式拿到自定义组件标签里的任一属性\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        // let currentPathname = this.props.history.location.pathname\n        // if (currentPathname === \"/\") {\n        //     currentPathname = \"/sales\"\n        //     this.props.history.push(\"/sales\")\n        // }\n        this.state = {\n            navInfo: [\n                {\n                    text: \"SALES REPORT\",\n                    href: \"/sales_report\"\n                },\n                {\n                    text: \"SALES\",\n                    href: \"/sales\"\n                },\n                {\n                    text: \"CARS\",\n                    href: \"/cars\"\n                },\n                {\n                    text: \"CUSTOMERS\",\n                    href: \"/customers\"\n                },\n                {\n                    text: \"PRODUCTS/SERVICES\",\n                    href: \"/items\"\n                }\n            ],\n            isLoading: true,\n            username: \"\"\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.user.user) {\n            requestUserInfo({userId: storageUtils.getUserId()}).then((r) => {\n                if (r.data.err_code === 0) {\n                    this.setState({username: r.data.user.username})\n                } else {\n                    storageUtils.deleteUserId()\n                }\n                this.setState({isLoading: false})\n            }).catch((err) => {\n                storageUtils.deleteUserId()\n            })\n        } else {\n            this.setState({username: this.props.user.user.username, isLoading: false})\n        }\n    }\n\n    handleClick = () => {\n        storageUtils.deleteUserId()\n        this.props.history.replace('/login')\n        this.props.logout()\n    }\n\n\n    render() {\n        let currentPathname = this.props.history.location.pathname\n        let {isLoading, username} = this.state\n        return (\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"/sales\">The One Car POS</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        {\n                            this.state.navInfo.map(\n                                (item, idx) => (\n                                    <Nav.Link as={Link} to={item.href} key={idx}\n                                              className={currentPathname === item.href ? \"active\" : \"\"}>{item.text}</Nav.Link>\n                                )\n                            )\n                        }\n                    </Nav>\n                    {isLoading ? null\n                        :\n                        <Navbar.Text>\n                            Signed in as: {username}\n                        </Navbar.Text>\n                    }\n                    <Button className=\"btn\" variant=\"warning\" type=\"submit\"\n                            style={{position: \"relative\", marginLeft: \"20px\"}}\n                            disabled={isLoading ? true : false}\n                            onClick={this.handleClick}>\n                        <span\n                            className={`spinner-border spinner-border-sm fade ${isLoading ? \"show\" : \"d-none\"}`}\n                            role=\"status\" aria-hidden=\"true\"\n                            style={{right: \"5px\", position: \"relative\"}}></span>\n                        {\n                            isLoading ? \"Loading...\" : \"Logout\"\n                        }\n                    </Button>\n                    {/*<button type=\"button\" class=\"btn btn-warning\" style={{marginLeft: \"20px\"}}></button>*/}\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}\n\nexport default connect(\n    state => ({user: state.user}),\n    {logout}\n)(withRouter(Header));\n","import React from \"react\";\nimport {Form} from \"react-bootstrap\";\nimport $ from 'jquery';\n\nclass MyDropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.value\n        }\n    }\n\n    handleDropDownClick = (event) => {\n        event.preventDefault();\n        $(event.target.nextElementSibling).slideToggle();\n    }\n\n    handleDropDownItemClick = (event) => {\n        const userInput = event.target.innerText\n        // if (userInput !== this.state.value) {\n        // }\n        if (this.props.label === \"owner\") {\n            this.props.transferMsg(userInput, this.props.label, event.target.getAttribute(\"data-id\"))\n        } else {\n            this.props.transferMsg(userInput, this.props.label)\n        }\n        this.setState({value: userInput})\n        $(event.target.parentElement).slideToggle();\n    }\n\n    render() {\n        const {data, label, value, control, invisibleLabel, dataId} = this.props;\n        return (\n            <div className={control ? \"dropdown\" : \"col-6 col-md-3 dropdown\"}>\n                {invisibleLabel ? null : <Form.Label>{label}</Form.Label>}\n                <button\n                    className={`btn btn-primary dropdown-toggle form-control ${invisibleLabel ? \"invisible-label-button-after\" : \"\"}`}\n                    onClick={this.handleDropDownClick} disabled={this.props.disabled ? true : false}>{value}</button>\n                <ul className=\"dropdown-menu\" id={invisibleLabel ? \"invisible-label-ul\" : \"\"}\n                    style={{height: data.length >= 5 ? 180 : data.length * 40}}>\n                    {\n                        data.map((item, idx) => (\n                            <li className=\"dropdown-item\" style={{cursor: \"pointer\"}} key={idx}\n                                onClick={this.handleDropDownItemClick} data-id={dataId ? dataId[idx] : \"\"}>{item}</li>\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport {MyDropdown};","import React from \"react\";\nimport $ from \"jquery\";\n\nclass MyAlert extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timeStamp: this.props.timeStamp\n        }\n    }\n\n    toggleAlert = () => {\n        $(`#${this.props.alertId}`).slideToggle()\n    }\n\n    componentDidUpdate(preProps,preStates, s) {\n        if (this.props.timeStamp === this.state.timeStamp) {\n            return\n        }\n        this.setState({timeStamp: this.props.timeStamp})\n        // 如果正在展示\n        if ($(`#${this.props.alertId}`).css(\"display\") === \"none\") {\n            this.toggleAlert()\n        }\n        // setTimeout(() => {\n        //     this.toggleAlert()\n        // }, 5000)\n    }\n\n    render() {\n        const {type, value, alertId} = this.props\n        // [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\", \"dark\"]\n\n        return (\n            <div className={`alert alert-${type}`} id={alertId} role=\"alert\" style={{display: \"none\", width: \"100%\"}}>\n                {value}\n                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.toggleAlert}>\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default MyAlert;","import React from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {MyDropdown} from \"../common/my-dropdown\";\nimport \"../common/my-dropdown.css\";\nimport jsonData from \"../../car_brand_model.json\";\nimport ImageUploader from 'react-images-upload';\nimport MyAlert from \"../common/my-alert\";\nimport {requestCustomersQuery, requestCarInsert} from \"../../api\";\n\nclass CardFormAdd extends React.Component {\n    constructor(props) {\n        super(props);\n        let brandPreContent = [];\n        Object.keys(jsonData).map((v, i) => {\n            brandPreContent.push(v)\n        });\n        let myDate = new Date();\n        let modelPreContent = jsonData[brandPreContent[0]];\n        this.state = {\n            colorPreContent: [\"WHITE\", \"BLACK\", \"PURPLE\", \"BLUE\", \"NAVY\", \"GREEN\", \"YELLOW\", \"ORANGE\", \"RED\", \"เทา\"],\n            ownersId: [],\n            ownersName: [],\n            ownersCount: 0,\n            brandPreContent: brandPreContent,\n            modelPreContent: modelPreContent,\n            userInput: {\n                plateNumber: \"\",\n                year: myDate.getFullYear(),\n                color: \"WHITE\",\n                owner: \"\",\n                ownerId: \"\",\n                brand: brandPreContent[0],\n                model: modelPreContent[0],\n                carImages: \"\"\n            },\n            isLoading: false,\n            alert: {\n                type: \"success\",\n                value: \"success\",\n                timeStamp: Date.now()\n            }\n        }\n    }\n\n    transferMsg = (msg, label, dataId) => {\n        let key = \"\"\n        let {userInput} = this.state\n        switch (label) {\n            case \"color\":\n                key = \"color\";\n                break;\n            case \"owner\":\n                key = \"owner\";\n                userInput.ownerId = dataId\n                this.setState({...this.state, userInput: userInput})\n                break;\n            case \"brand\":\n                key = \"brand\";\n                let tmp = jsonData[msg]\n                userInput[\"model\"] = tmp[0]\n                let {state} = this\n                state.userInput = userInput\n                state.modelPreContent = tmp\n                this.setState(state)\n                break;\n            case \"model\":\n                key = \"model\";\n                break;\n            default:\n                break;\n        }\n        userInput[key] = msg\n        this.setState({...this.state, userInput: userInput})\n    }\n\n    informAlert = (value, type) => {\n        let {alert} = this.state\n        alert.type = type ? type : \"warning\"\n        alert.value = value ? value : \"Error\"\n        alert.timeStamp = Date.now()\n        this.setState({...this.state, alert: alert})\n    }\n\n    handleChange = (e) => {\n        let {value} = e.target\n        const key = e.target.getAttribute('name');\n        this.setState(prevState => {\n            let userInput = Object.assign({}, prevState.userInput);\n            userInput[key] = value\n            return {userInput};\n        })\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        let {userInput} = this.state\n        if (!userInput.plateNumber || !userInput.year || !userInput.color || !userInput.owner || !userInput.brand || !userInput.model) {\n            this.informAlert(\"One or more required fields are empty\")\n            return\n        }\n        this.setState({isLoading: true})\n        requestCarInsert(userInput).then((r) => {\n            if (r.data.err_code === 0) {\n                this.props.fromFormToParent(r.data.car)\n                let date = new Date()\n                userInput.plateNumber = \"\"\n                userInput.year = date.getFullYear()\n                userInput.color = \"WHITE\"\n                userInput.owner = \"\"\n                userInput.ownerId = \"\"\n                // userInput.brand = this.brandPreContent[0]\n                // userInput.model = this.modelPreContent[0]\n                userInput.carImages = \"\"\n                let domCloseIcon = document.getElementsByClassName(\"deleteImage\")\n                for (let i = 0; i < domCloseIcon.length; i++) {\n                    domCloseIcon[i].click()\n                }\n                this.informAlert(\"Insert success\", \"success\")\n                this.setState({...this.state, userInput: userInput})\n            } else {\n                // 服务器返回错误\n                this.informAlert(`Insert fail ${r.data.message}`, \"danger\")\n                // this.setState({...this.state, isLoading: false})\n            }\n            this.setState({...this.state, isLoading: false})\n            console.log(this.state)\n        }).catch((err) => {\n            // 请求返回错误\n            this.informAlert(`Insert fail ${err}`, \"danger\")\n            this.setState({...this.state, isLoading: false})\n            console.log(err)\n        })\n    }\n\n    onDrop = (picture) => {\n        let {userInput} = this.state\n        // userInput.carImages = userInput.carImages.concat(picture)\n        userInput.carImages = picture\n        this.setState({...this.state, userInput: userInput});\n    }\n\n    requestData = (currentPageCount) => {\n        this.setState({isLoading: true})\n        requestCustomersQuery({currentPageCount}).then((r) => {\n            if (r.data.err_code === 0) {\n                let {ownersId, ownersName} = this.state\n                for (let i = 0; i < r.data.customers.length; i++) {\n                    ownersId.push(r.data.customers[i]._id)\n                    ownersName.push(r.data.customers[i].name)\n                }\n                this.setState({\n                    ownersId: ownersId,\n                    ownersName: ownersName,\n                    ownersCount: r.data.customersCount,\n                    isLoading: false\n                })\n            } else {\n                this.informAlert(`Insert fail ${r.data.message}`, \"danger\")\n            }\n        }).catch((err) => {\n            this.informAlert(`Insert fail ${err}`, \"danger\")\n            this.setState({...this.state, isLoading: false})\n            console.log(err)\n        })\n    }\n\n    componentDidMount() {\n        this.requestData(0)\n    }\n\n    render() {\n        const {userInput, colorPreContent, ownersId, ownersName, brandPreContent, modelPreContent, isLoading, alert} = this.state\n        return (\n            <Form>\n                <div className=\"row\">\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Plate Number</Form.Label>\n                        <input type=\"text\" className=\"form-control\" style={{textAlign: \"left\"}}\n                               onChange={this.handleChange} name=\"plateNumber\" value={userInput.plateNumber}></input>\n                    </div>\n\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Year</Form.Label>\n                        <input type=\"number\" className=\"form-control\" style={{textAlign: \"left\"}}\n                               onChange={this.handleChange} name=\"year\" value={userInput.year}></input>\n                    </div>\n                    <MyDropdown transferMsg={(msg, label) => this.transferMsg(msg, label)} data={colorPreContent}\n                                label=\"color\" value={userInput.color}></MyDropdown>\n                    <MyDropdown transferMsg={(msg, label, dataId) => this.transferMsg(msg, label, dataId)}\n                                data={ownersName} dataId={ownersId}\n                                label=\"owner\" value={userInput.owner}></MyDropdown>\n                    <MyDropdown transferMsg={(msg, label) => this.transferMsg(msg, label)} data={brandPreContent}\n                                label=\"brand\" value={userInput.brand}></MyDropdown>\n                    <MyDropdown transferMsg={(msg, label) => this.transferMsg(msg, label)} data={modelPreContent}\n                                label=\"model\" value={userInput.model}></MyDropdown>\n                    <div className=\"col-6 col-md-3\">\n                    </div>\n                    <ImageUploader\n                        withIcon={true}\n                        buttonText='Choose images'\n                        onChange={this.onDrop}\n                        imgExtension={['.jpg', 'jpeg', '.gif', '.png']}\n                        label=\"Max file size: 5mb, accepted: jpg|jpeg|gif|png\"\n                        maxFileSize={5242880}\n                        withPreview={true}\n                    />\n                </div>\n                <br/>\n                <Form.Row>\n                    <div className=\"col-6 col-md-1\">\n                        <Button variant=\"primary\" type=\"submit\" style={{position: \"relative\"}}\n                                disabled={isLoading ? true : false}\n                                onClick={this.handleClick}>\n                            <span className={`spinner-border spinner-border-sm fade ${isLoading ? \"show\" : \"d-none\"}`}\n                                  role=\"status\" aria-hidden=\"true\" style={{right: \"5px\", position: \"relative\"}}></span>\n                            {\n                                isLoading ? \"Loading...\" : \"Submit\"\n                            }\n                        </Button>\n                    </div>\n                </Form.Row>\n                <br/>\n                <Form.Row>\n                    <MyAlert type={alert.type} value={alert.value} timeStamp={alert.timeStamp} alertId=\"alert-cars-form\"></MyAlert>\n                </Form.Row>\n\n            </Form>\n        )\n    }\n}\n\nexport default CardFormAdd;","import React from \"react\";\nimport CarFormAdd from \"./form-add\";\nimport {Card} from \"react-bootstrap\";\nimport $ from \"jquery\";\n\nclass CardFormWrapperCars extends React.Component {\n    handleClick = (e) => {\n        $(e.target.nextElementSibling).slideToggle();\n        $(\"#i-angle\").toggleClass(\"rotate-open\");\n    }\n\n    fromFormToParent = (data) => {\n        this.props.fromWrapperToParent(data)\n    }\n\n    render() {\n        return(\n            <Card>\n                <i id=\"i-angle\" className=\"rotate-open\"></i>\n                <h5 className=\"card-header\" onClick={this.handleClick} style={{cursor: \"pointer\"}}>&nbsp;&nbsp;&nbsp;&nbsp;Add a new car record</h5>\n                <Card.Body>\n                    <CarFormAdd fromFormToParent={(data) => this.fromFormToParent(data)}></CarFormAdd>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\n\nexport default CardFormWrapperCars;","import React from \"react\";\nimport {Carousel} from \"react-bootstrap\";\nimport {LazyLoadImage} from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\nclass MyCarousels extends React.Component {\n\n    render() {\n        const {data} = this.props\n        return (\n            <Carousel interval={null}>\n                {\n                    data.imageURLs.map((item, idx) => (\n                        <Carousel.Item key={idx} style={{height: \"300px\"}}>\n                            {/*<img*/}\n                            {/*    className=\"d-block w-100 lazy\"*/}\n                            {/*    src={item.src}*/}\n                            {/*    alt={item.brand}*/}\n                            {/*    style={{height: \"300px\"}}*/}\n                            {/*/>*/}\n                            <LazyLoadImage\n                                style={{minBlockSize: \"-webkit-fill-available\"}}\n                                alt={data.brand}\n                                effect=\"blur\"\n                                src={`https://e307b1922e60.ngrok.io/images/${item}`} // use normal <img> attributes as props\n                                width=\"100%\"/>\n                            <Carousel.Caption>\n                                <h3>{data.brand}</h3>\n                                <p>{data.model}</p>\n                            </Carousel.Caption>\n                        </Carousel.Item>\n                    ))\n                    // Object.keys(data).forEach((key, idx) => (\n                    //\n                    // ))\n                }\n\n                {/*<Carousel.Item>*/}\n                {/*  <img*/}\n                {/*    className=\"d-block w-100\"*/}\n                {/*    src=\"holder.js/800x400?text=Second slide&bg=282c34\"*/}\n                {/*    alt=\"Third slide\"*/}\n                {/*  />*/}\n                {/*  <Carousel.Caption>*/}\n                {/*    <h3>Audi</h3>*/}\n                {/*    <p>100</p>*/}\n                {/*  </Carousel.Caption>*/}\n                {/*</Carousel.Item>*/}\n\n                {/*<Carousel.Item>*/}\n                {/*  <img*/}\n                {/*    className=\"d-block w-100\"*/}\n                {/*    src=\"holder.js/800x400?text=Third slide&bg=20232a\"*/}\n                {/*    alt=\"Third slide\"*/}\n                {/*  />*/}\n                {/*  <Carousel.Caption>*/}\n                {/*    <h3>Audi</h3>*/}\n                {/*    <p>100</p>*/}\n                {/*  </Carousel.Caption>*/}\n                {/*</Carousel.Item>*/}\n\n            </Carousel>\n        );\n    }\n}\n\nexport default MyCarousels;","import React from \"react\";\nimport MyCarousels from \"../common/my-carousels\";\n\nclass CardDetailCars extends React.Component {\n    render() {\n        const {data} = this.props\n        return(\n            <div className=\"col mb-4\">\n                <div className=\"card h-100\" id=\"card-detail-cars\">\n                    <MyCarousels className=\"card-img-top\" data={data}></MyCarousels>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{data.brand +\" \"+ data.model}</h5>\n                        <p className=\"card-text\">Owner: {data.owner.name}</p>\n                        <p className=\"card-text\">Year: {data.year}</p>\n                        <p className=\"card-text\">Color: {data.color}</p>\n                        <p className=\"card-text\">Plate Number: {data.plateNumber}</p>\n                        {/*<p className=\"card-text\">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>*/}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CardDetailCars;","import React from \"react\";\nimport \"./my-search-bar.css\";\nimport $ from \"jquery\";\n\nclass MySearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\",\n            fields: this.props.fields\n        }\n    }\n\n    // handleClick = () => {\n    //     $(\"#div-dropdown-menu\").slideToggle()\n    // }\n\n    handleDropDownClick = (event) => {\n        event.preventDefault();\n        $(event.target.nextElementSibling).slideToggle();\n    }\n\n    handleDropDownItemClick = (event) => {\n        const userInput = event.target.innerText\n        if (userInput !== this.state.fields) {\n            this.props.transferMsg(userInput, this.props.label)\n            this.setState({fields: userInput, value: \"\"})\n        }\n        $(event.target.parentElement).slideToggle();\n    }\n\n    handleChange = (e) => {\n        let {value} = this.state\n        value = e.target.value\n        this.setState({...this.state, value})\n    }\n\n    enterTriggerSearch = (e) => {\n        if(e.keyCode === 13) {\n            this.props.transferMsg(this.state.value, \"search-text\")\n            // search-text\n        }\n    }\n\n    clickTriggerSearch = () => {\n        this.props.transferMsg(this.state.value, \"search-text\")\n    }\n\n    render() {\n        const {data, fields} = this.props\n        return (\n            <div className=\"input-group input-field col-12 col-md-3\">\n                <div className=\"input-group-prepend\" style={{height: \"38px\"}}>\n                    <button className=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\"\n                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\n                            onClick={this.handleDropDownClick}>\n                        {fields}\n                    </button>\n                    <div className=\"dropdown-menu\" id=\"div-dropdown-menu\">\n                        {\n                            data.map((item, idx) => (\n                                <li className=\"dropdown-item\" style={{cursor: \"pointer\"}} key={idx}\n                                    onClick={this.handleDropDownItemClick}>{item}</li>\n                            ))\n                        }\n                        {/*<a className=\"dropdown-item\" href=\"#\">Another action</a>*/}\n                        {/*<a className=\"dropdown-item\" href=\"#\">Something else here</a>*/}\n                        {/*<div role=\"separator\" className=\"dropdown-divider\"></div>*/}\n                        {/*<a className=\"dropdown-item\" href=\"#\">Separated link</a>*/}\n                    </div>\n                </div>\n                <input type=\"text\" className=\"input-search-bar form-control\"\n                       aria-label=\"Text input with dropdown button\"\n                       name=\"search-text\"\n                       value={this.state.value}\n                       onChange={this.handleChange}\n                       onKeyUp={this.enterTriggerSearch}\n                />\n                <i onClick={this.clickTriggerSearch}></i>\n            </div>\n        )\n    }\n}\n\nexport default MySearchBar;","import React from \"react\";\nimport {MyDropdown} from \"../common/my-dropdown\";\nimport MySearchBar from \"../common/my-search-bar\";\nimport jsonData from \"../../car_brand_model.json\";\n\nclass SearchField extends React.Component {\n    constructor(props) {\n        super(props);\n        // let carPreContent = {\n        //     \"All\": [\"All\"]\n        // };\n        // let brandPreContent = []\n        // Object.keys(jsonData).map((v,i)=>{\n        //     brandPreContent.push(v)\n        //     carPreContent[v] = jsonData[v]\n        //     carPreContent[v].unshift(\"All\")\n        // });\n        // console.log(carPreContent)\n        let brandPreContent = [\"All\"]\n        let carPreContent = {\n            \"All\": [\"All\"]\n        }\n        for (let key in jsonData) {\n            brandPreContent.push(key);\n            let arrayCopy = [\"All\", ...jsonData[key]];\n            carPreContent[key] = arrayCopy;\n        }\n        this.state = {\n            colorPreContent: [\"All\", \"WHITE\", \"BLACK\", \"PURPLE\", \"BLUE\", \"NAVY\", \"GREEN\", \"YELLOW\", \"ORANGE\", \"RED\", \"เทา\"],\n            ownerPreContent: [],\n            carPreContent: carPreContent,\n            brandPreContent: brandPreContent,\n            modelPreContent: carPreContent[\"All\"],\n            userInput: {\n                // year: myDate.getFullYear(),\n                searchField: \"Plate Number\",\n                searchText: \"\",\n                color: \"All\",\n                brand: \"All\",\n                model: \"All\"\n            }\n        }\n    }\n\n    transferMsg = (msg, label) => {\n        let key = \"\"\n        switch (label) {\n            case \"color\":\n                key = \"color\";\n                break;\n            case \"owner\":\n                key = \"owner\";\n                break;\n            case \"brand\":\n                key = \"brand\";\n                this.setState({...this.state, modelPreContent: this.state.carPreContent[msg]});\n                this.setState(prevState => {\n                    let userInput = Object.assign({}, prevState.userInput);\n                    userInput[\"model\"] = this.state.carPreContent[msg][0]\n                    return {userInput};\n                })\n                break;\n            case \"model\":\n                key = \"model\";\n                break;\n            case \"search-field\":\n                key = \"searchField\"\n                break;\n            case \"search-text\":\n                key = \"searchText\"\n                break;\n            default:\n                break;\n        }\n        this.setState(prevState => {\n            let userInput = Object.assign({}, prevState.userInput);\n            if (label === \"search-text\") {\n                this.props.fromSearchFieldToParent(userInput)\n            }\n            userInput[key] = msg\n            return {userInput};\n        })\n    }\n\n    render() {\n        console.log(this.state)\n        return (\n            <div className=\"card\">\n                <div className=\"card-body row\">\n                    <MyDropdown transferMsg={(msg, label) => this.transferMsg(msg, label)}\n                                data={this.state.colorPreContent} label=\"color\"\n                                value={this.state.userInput.color}></MyDropdown>\n                    <MyDropdown transferMsg={(msg, label) => this.transferMsg(msg, label)}\n                                data={this.state.brandPreContent} label=\"brand\"\n                                value={this.state.userInput.brand}></MyDropdown>\n                    <MyDropdown transferMsg={(msg, label) => this.transferMsg(msg, label)}\n                                data={this.state.modelPreContent} label=\"model\"\n                                value={this.state.userInput.model}></MyDropdown>\n                    <MySearchBar transferMsg={(msg, label) => this.transferMsg(msg, label)} label=\"search-field\"\n                                 fields={this.state.userInput.searchField}\n                                 data={[\"Plate Number\", \"Owner\"]}></MySearchBar>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchField;","import React from 'react';\n// import {Pagination} from \"react-bootstrap\";\n\n// 每个组件有个prop，prop可以通过'prop.'的方式拿到自定义组件标签里的任一属性\n\nclass MyPagination extends React.Component {\n    handleClick = (e) => {\n        let pageCount = e.target.getAttribute(\"name\")\n        let {currentPageCount} = this.props\n        if (parseInt(pageCount) === currentPageCount) {\n            return\n        }\n        switch (pageCount) {\n            case \"pre\":\n                currentPageCount--\n                break\n            case \"nex\":\n                currentPageCount++\n                break\n            default:\n                currentPageCount = pageCount\n        }\n        this.props.fromPaginationToParent(currentPageCount)\n    }\n\n    render() {\n        const {currentPageCount, dataCount, dataPerPage} = this.props\n        const totalPagesCount = Math.ceil(dataCount / dataPerPage)\n        let arr = []\n        if (totalPagesCount<=5) {\n            for (let i=0;i<totalPagesCount;i++) {\n                arr.push(i+1)\n            }\n        } else {\n            let startPageCount\n            let endPageCount\n            startPageCount = currentPageCount - 2\n            endPageCount = currentPageCount + 2\n            arr = [currentPageCount - 2, currentPageCount - 1, currentPageCount, currentPageCount + 1, currentPageCount + 2]\n            if (startPageCount <= 0) {\n                let count = -(startPageCount)\n                let lastValue = arr[arr.length - 1]\n                arr.splice(0, count + 1)\n                for (let i = 0; i < count + 1; i++) {\n                    lastValue += 1\n                    arr.push(lastValue)\n                }\n            }\n            if (endPageCount > totalPagesCount) {\n                let count = (endPageCount - totalPagesCount)\n                let firstValue = arr[0]\n                arr.splice(arr.length - count, count + 1)\n                for (let i = 0; i < count; i++) {\n                    firstValue -= 1\n                    arr.unshift(firstValue)\n                }\n            }\n        }\n        return (\n            // <Pagination>\n            //   {/*<Pagination.First />*/}\n            //   <Pagination.Prev />\n            //   <Pagination.Item>{1}</Pagination.Item>\n            //   {/*<Pagination.Ellipsis />*/}\n            //\n            //   <Pagination.Item>{10}</Pagination.Item>\n            //   <Pagination.Item active>{12}</Pagination.Item>\n            //   <Pagination.Item disabled>{14}</Pagination.Item>\n            //\n            //   {/*<Pagination.Ellipsis />*/}\n            //   <Pagination.Item>{20}</Pagination.Item>\n            //   <Pagination.Next />\n            //   {/*<Pagination.Last />*/}\n            // </Pagination>\n\n            <ul className=\"pagination\" style={{margin: \"0 auto\"}}>\n                <li className={`page-item ${currentPageCount === 1 ? \"disabled\" : \"\"}`}>\n                    <p className=\"page-link\" role=\"button\" onClick={this.handleClick} name=\"pre\">\n                        ‹\n                    </p>\n                </li>\n                {\n                    arr.map((item, idx) => (\n                        <li key={idx} className={`page-item ${currentPageCount === item ? \"active\" : \"\"}`}>\n                            <p className=\"page-link\" role=\"button\" onClick={this.handleClick} name={item}>{item}</p>\n                        </li>\n                    ))\n                }\n\n                {/*<li className=\"page-item\">*/}\n                {/*    <p className=\"page-link\" role=\"button\">1</p>*/}\n                {/*</li>*/}\n                {/*<li className=\"page-item\">*/}\n                {/*    <p className=\"page-link\" role=\"button\">10</p>*/}\n                {/*</li>*/}\n                {/*<li className=\"page-item active\">*/}\n                {/*    <span className=\"page-link\">*/}\n                {/*        12*/}\n                {/*        <span className=\"sr-only\">(current)</span>*/}\n                {/*    </span>*/}\n                {/*</li>*/}\n                {/*<li className=\"page-item disabled\">*/}\n                {/*    <span className=\"page-link\" disabled=\"\">14</span>*/}\n                {/*</li>*/}\n                {/*<li className=\"page-item\">*/}\n                {/*    <p className=\"page-link\" role=\"button\">20</p>*/}\n                {/*</li>*/}\n\n                <li className={`page-item ${currentPageCount === totalPagesCount ? \"disabled\" : \"\"}`}>\n                    <p className=\"page-link\" role=\"button\" onClick={this.handleClick} name=\"nex\">\n                        ›\n                    </p>\n                </li>\n            </ul>\n        )\n    }\n}\n\nexport default MyPagination;\n","import React from \"react\";\n\nclass MySpinner extends React.Component {\n    render() {\n        const {isLoading} = this.props\n        return (\n            <div>\n                <div className={`modal-backdrop fade ${isLoading ? \"show\" : \"d-none\"}`}></div>\n                <div className={`text-center fade ${isLoading ? \"show\" : \"\"}`}\n                     style={{position: \"fixed\", left: \"50%\", bottom: \"50%\", zIndex: \"1060\"}}>\n                    <div className=\"spinner-border text-primary\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MySpinner;","import React from 'react';\nimport CardFormWrapperCars from \"./card-form-wrapper-cars\";\nimport CardDetailCars from \"./card-detail-cars\";\nimport SearchField from \"./search-field\";\nimport {requestCarsQuery} from \"../../api\";\nimport MyPagination from \"../common/my-pagination\";\nimport MySpinner from \"../common/my-spinner\";\n\n// add a search box, the search keyword can be Licence plate number, owner's name,\n// also add filter of brands / models / color\n\nclass PageCars extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: [\"Name\", \"Phone\", \"Email\"],\n            keys: [\"name\", \"phone\", \"email\"],\n            cars: [],\n            currentPageCount: 1,\n            carsCount: 1,\n            isLoading: true\n        }\n    }\n\n    fromWrapperToParent = (data) => {\n        this.requestData({currentPageCount: this.state.currentPageCount})\n    }\n\n    fromSearchFieldToParent = (userInput) => {\n        userInput.currentPageCount = this.state.currentPageCount\n        this.requestData(userInput)\n    }\n\n    transferMsgFromPagination = async (msg) => {\n        this.setState({isLoading: true})\n        msg = parseInt(msg)\n        await this.requestData(msg)\n        this.setState({currentPageCount: msg})\n    }\n\n    requestData = (queryCondition) => {\n        this.setState({isLoading: true})\n        // {color, brand, model, searchField, searchText, currentPageCount}\n        requestCarsQuery(queryCondition).then((r) => {\n            if (r.data.err_code === 0) {\n                this.setState({\n                    cars: r.data.cars,\n                    carsCount: r.data.count,\n                    isLoading: false\n                })\n            }\n            console.log(this.state)\n        }).catch((err) => {\n            this.setState({\n                isLoading: false\n            })\n            console.log(err)\n        })\n    }\n\n    async componentDidMount() {\n        await this.requestData({currentPageCount: this.state.currentPageCount})\n    }\n\n    render() {\n        const {cars} = this.state\n        return (\n            <div style={{padding: \"30px\"}}>\n                <MySpinner isLoading={this.state.isLoading}></MySpinner>\n                <CardFormWrapperCars\n                    fromWrapperToParent={(data) => this.fromWrapperToParent(data)}></CardFormWrapperCars>\n                <br/>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"sticky-top\" style={{marginBottom: \"20px\"}}>\n                            <SearchField\n                                fromSearchFieldToParent={(userInput) => this.fromSearchFieldToParent(userInput)}></SearchField>\n                        </div>\n                        <div className=\"row row-cols-1 row-cols-md-6\">\n                            {\n                                cars.map((car, idx) => (\n                                    <CardDetailCars key={idx} data={car}></CardDetailCars>\n                                ))\n                            }\n                        </div>\n                        <div className=\"row\">\n                            <MyPagination fromPaginationToParent={(msg, label) => this.transferMsgFromPagination(msg, label)}\n                                          dataPerPage={18} currentPageCount={this.state.currentPageCount}\n                                          dataCount={this.state.carsCount}></MyPagination>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PageCars;","import React from \"react\";\nimport {Form, Button} from \"react-bootstrap\";\nimport MyAlert from \"../common/my-alert\";\nimport {requestCustomerInsert} from \"../../api\";\n\nclass FormAdd extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userInput: {\n                name: \"\",\n                phone: \"\",\n                email: \"\"\n            },\n            isLoading: false,\n            alert: {\n                type: \"success\",\n                value: \"success\",\n                timeStamp: Date.now()\n            }\n        };\n    }\n\n    informAlert = (value, type) => {\n        let {alert} = this.state\n        alert.type = type ? type : \"warning\"\n        alert.value = value ? value : \"Error\"\n        alert.timeStamp = Date.now()\n        this.setState({...this.state, alert: alert})\n    }\n\n    handleChange = (e) => {\n        let {value} = e.target\n        const key = e.target.getAttribute('name');\n        if (key === \"phone\") {\n            let re = /^[0-9]*$/;\n            if (!re.test(value)) {\n                return\n            }\n        }\n        let {userInput} = this.state\n        userInput[key] = value\n        this.setState({...this.state, userInput: userInput})\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        const {userInput} = this.state\n        if (!userInput.name) {\n            this.informAlert(\"Name is empty\")\n            return\n        }\n        let rePhone = /^(09)\\d{8}$/;\n        if (!rePhone.test(userInput.phone)) {\n            this.informAlert(\"Phone number format is not correct\")\n            return\n        }\n        let reEmail = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\n        if (!reEmail.test(userInput.email)) {\n            this.informAlert(\"Email format is not correct\")\n            return\n        }\n        this.setState({isLoading: true})\n        requestCustomerInsert(userInput).then((r) => {\n            if (r.data.err_code === 0) {\n                this.props.fromFormToParent(userInput)\n                userInput.name = \"\"\n                userInput.phone = \"\"\n                userInput.email = \"\"\n                this.informAlert(\"Insert success\", \"success\")\n                this.setState({...this.state, userInput: userInput})\n            } else {\n                // 服务器返回错误\n                this.informAlert(\"Insert fail\", \"danger\")\n                // this.setState({...this.state, isLoading: false})\n            }\n            this.setState({...this.state, isLoading: false})\n        }).catch((err) => {\n            // 请求返回错误\n            this.informAlert(`Insert fail ${err}`, \"danger\")\n            this.setState({...this.state, isLoading: false})\n            console.log(err)\n        })\n    }\n\n    render() {\n        const {userInput, isLoading, alert} = this.state\n        return (\n            <Form>\n                <Form.Row>\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Name</Form.Label>\n                        <input type=\"text\" className=\"form-control\" style={{textAlign: \"left\"}}\n                               onChange={this.handleChange} name=\"name\" value={userInput.name}></input>\n                    </div>\n\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Phone</Form.Label>\n                        <input type=\"text\" className=\"form-control\" style={{textAlign: \"left\"}}\n                               onChange={this.handleChange} name=\"phone\" value={userInput.phone}></input>\n                    </div>\n\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Email</Form.Label>\n                        <input type=\"email\" className=\"form-control\" style={{textAlign: \"left\"}}\n                               onChange={this.handleChange} name=\"email\" value={userInput.email}></input>\n                    </div>\n                    <div className=\"col-6 col-md-1\">\n                        <Button variant=\"primary\" type=\"submit\" style={{top: \"30px\", position: \"relative\"}}\n                                disabled={isLoading ? true : false}\n                                onClick={this.handleClick}>\n                            <span className={`spinner-border spinner-border-sm fade ${isLoading ? \"show\" : \"d-none\"}`}\n                                  role=\"status\" aria-hidden=\"true\" style={{right: \"5px\", position: \"relative\"}}></span>\n                            {\n                                isLoading ? \"Loading...\" : \"Submit\"\n                            }\n                        </Button>\n                    </div>\n                    {/*<div className=\"col-6 col-md-2\">*/}\n                    {/*    <div className=\"alert alert-danger\" role=\"alert\" id=\"div-alert\"*/}\n                    {/*         style={{position: \"relative\", top: \"20px\", display: \"none\"}}></div>*/}\n                    {/*</div>*/}\n                </Form.Row>\n                <br/>\n                <Form.Row>\n                    <MyAlert type={alert.type} value={alert.value} timeStamp={alert.timeStamp} alertId=\"alert-customers-form\"></MyAlert>\n                </Form.Row>\n\n            </Form>\n        )\n    }\n}\n\nexport default FormAdd;","import React from \"react\";\nimport FormAdd from \"./form-add\";\nimport {Card} from \"react-bootstrap\";\nimport $ from \"jquery\"\n\nclass CardFormWrapperCustomers extends React.Component {\n\n    handleClick = (e) => {\n        $(e.target.nextElementSibling).slideToggle();\n        $(\"#i-angle\").toggleClass(\"rotate-open\");\n    }\n\n    fromFormToParent = (data) => {\n        this.props.fromWrapperToParent(data)\n    }\n\n    render() {\n        return(\n            <Card>\n                <i id=\"i-angle\" className=\"rotate-open\"></i>\n                <h5 className=\"card-header\" onClick={this.handleClick} style={{cursor: \"pointer\"}}>&nbsp;&nbsp;&nbsp;&nbsp;{this.props.cardTitle}</h5>\n                <Card.Body>\n                    <FormAdd fromFormToParent={(data) => {this.fromFormToParent(data)}}></FormAdd>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\n\nexport default CardFormWrapperCustomers;","import React from 'react';\nimport {Table} from \"react-bootstrap\";\nimport {MyDropdown} from \"./my-dropdown\";\nimport MyAlert from \"./my-alert\";\nimport {\n    requestCustomerUpdate,\n    requestCustomerDelete,\n    requestItemDelete,\n    requestItemUpdate\n} from \"../../api\";\n\n// 每个组件有个prop，prop可以通过'prop.'的方式拿到自定义组件标签里的任一属性\n\nexport class MyTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contents: this.props.contents,\n            idxIsLoading: [],\n            alert: {\n                type: \"success\",\n                value: \"success\",\n                timeStamp: Date.now()\n            }\n        }\n    }\n\n    informAlert = (value, type) => {\n        let {alert} = this.state\n        alert.type = type ? type : \"warning\"\n        alert.value = value ? value : \"Error\"\n        alert.timeStamp = Date.now()\n        this.setState({alert: alert})\n    }\n\n    handleClick = (e) => {\n        let {idxIsLoading, contents} = this.state\n        let rowId = parseInt(e.target.parentElement.parentElement.getAttribute(\"idx\"))\n        if (contents.length === 0) {\n            contents = this.props.contents\n        }\n        // if (contents.length === 0) {\n        //     this.informAlert(\"Value no change\")\n        //     return\n        // }\n        let updateFunc\n        let deleteFunc\n        if (this.props.tableRole === \"customers\") {\n            let operatingContent = contents[rowId]\n            for (let item in operatingContent) {\n                if (!operatingContent[item]) {\n                    this.informAlert(\"One or more required fields are empty\")\n                    return\n                }\n            }\n            let rePhone = /^(09)\\d{8}$/;\n            if (!rePhone.test(operatingContent.phone)) {\n                this.informAlert(\"Phone number format is not correct\")\n                return\n            }\n            let reEmail = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\n            if (!reEmail.test(operatingContent.email)) {\n                this.informAlert(\"Email format is not correct\")\n                return\n            }\n            updateFunc = requestCustomerUpdate\n            deleteFunc = requestCustomerDelete\n        } else if (this.props.tableRole === \"items\") {\n            // amount: 87\n            // brand: \"brand 1\"\n            // name: \"product 1\"\n            // price: 120\n            // type: \"products\"\n            // _id: \"5f9525e01169084cb2567370\"\n            let operatingContent = contents[rowId]\n            console.log(operatingContent)\n            for (let key in operatingContent) {\n                if (key === \"brand\" && operatingContent.type === \"services\") {\n                    continue\n                }\n                if (!operatingContent[key] && operatingContent.type === \"products\") {\n                    this.informAlert(\"One or more required fields are empty\")\n                    return\n                }\n            }\n            updateFunc = requestItemUpdate\n            deleteFunc = requestItemDelete\n        }\n        idxIsLoading.push(rowId)\n        this.setState({idxIsLoading: idxIsLoading})\n        switch (e.target.getAttribute(\"name\")) {\n            case \"update\":\n                updateFunc(contents[rowId]).then((r) => {\n                    if (r.data.err_code === 0) {\n                        this.informAlert(\"Update success\", \"success\")\n                    } else {\n                        this.informAlert(`Update fail ${r.data.message}`, \"danger\")\n                    }\n                    let {idxIsLoading} = this.state\n                    idxIsLoading = idxIsLoading.filter(idx => idx !== rowId)\n                    this.setState({idxIsLoading: idxIsLoading})\n                }).catch((err) => {\n                    this.informAlert(`Update fail ${err}`, \"danger\")\n                    let {idxIsLoading} = this.state\n                    idxIsLoading = idxIsLoading.filter(idx => idx !== rowId)\n                    this.setState({idxIsLoading: idxIsLoading})\n                })\n                break\n            case \"delete\":\n                deleteFunc({_id: contents[rowId]._id}).then((r) => {\n                    if (r.data.err_code === 0) {\n                        this.informAlert(\"Delete success\", \"success\")\n                        contents = contents.splice(rowId, 1)\n                    } else {\n                        this.informAlert(`Delete fail ${r.data.message}`, \"danger\")\n                    }\n                    let {idxIsLoading} = this.state\n                    idxIsLoading = idxIsLoading.filter(idx => idx !== rowId)\n                    this.setState({contents: contents, idxIsLoading: idxIsLoading})\n                }).catch((err) => {\n                    this.informAlert(`Delete fail ${err}`, \"danger\")\n                    let {idxIsLoading} = this.state\n                    idxIsLoading = idxIsLoading.filter(idx => idx !== rowId)\n                    this.setState({idxIsLoading: idxIsLoading})\n                })\n                break\n            default:\n                break\n        }\n\n\n    }\n\n    handleDropDownChange = (msg, label) => {\n        let {contents} = this.state\n        if (contents.length === 0) {\n            contents = this.props.contents\n        }\n        let operatingContent = contents[label]\n        operatingContent.type = msg\n        if (msg === \"services\") {\n            operatingContent.amount = -1\n            operatingContent.brand = \"\"\n        }\n        if (msg === \"products\") {\n            operatingContent.amount = 0\n            operatingContent.brand = \"\"\n        }\n        this.setState({contents: contents})\n        console.log(operatingContent)\n        console.log(msg, label)\n    }\n\n    handleChange = (e) => {\n        let rowId = e.target.parentElement.parentElement.getAttribute(\"idx\")\n        let columnId = e.target.getAttribute(\"name\")\n        let value = e.target.value\n        let {contents} = this.state\n        if (contents.length === 0) {\n            contents = this.props.contents\n        }\n        console.log(contents)\n        contents[rowId][columnId] = value\n        this.setState({contents: contents})\n    }\n\n    render() {\n        const {fields, keys, contents} = this.props\n        const {alert, idxIsLoading} = this.state\n        return (\n            <div>\n                <div className=\"form-row\">\n                    <MyAlert type={alert.type} value={alert.value} timeStamp={alert.timeStamp}\n                             alertId=\"alert-my-table\"></MyAlert>\n                </div>\n                <Table hover responsive>\n                    <thead>\n                    <tr className=\"thead-dark text-center\">\n                        {\n                            fields.map(\n                                (item, idx) => (\n                                    <th key={idx} width={`${100 / fields.length}%`}>{item}</th>\n                                )\n                            )\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        contents.map((item, idx) => (\n                            <tr key={idx} idx={idx}>\n                                {\n                                    keys.map((key, subIdx) => (\n                                        <td key={subIdx} className=\"text-center\">\n                                            {\n                                                key === \"type\"\n                                                    ?\n                                                    <MyDropdown\n                                                        label={idx}\n                                                        transferMsg={(msg, label) => this.handleDropDownChange(msg, label)}\n                                                        data={[\"products\", \"services\"]} value={item[key]}\n                                                        invisibleLabel={true} control={true}></MyDropdown>\n                                                    :\n                                                    <input\n                                                        type={key === \"amount\" || key === \"price\" ? \"number\" : \"text\"}\n                                                        className=\"form-control\" name={key}\n                                                        value={item[key]}\n                                                        disabled={(item[\"type\"] === \"services\" && item[key] === \"\") || item[key] === -1 || idxIsLoading.indexOf(idx) > -1}\n                                                        onChange={this.handleChange}/>\n                                            }\n                                        </td>\n                                    ))\n                                }\n                                <td className=\"text-center\">\n                                    <button type=\"button\" className=\"btn btn-primary\" style={{marginRight: \"20px\"}}\n                                            name=\"update\"\n                                            disabled={idxIsLoading.indexOf(idx) > -1 ? true : false}\n                                            onClick={this.handleClick}>\n                                        <span\n                                            className={`spinner-border spinner-border-sm fade ${idxIsLoading.indexOf(idx) > -1 ? \"show\" : \"d-none\"}`}\n                                            role=\"status\" aria-hidden=\"true\"\n                                            style={{right: \"5px\", position: \"relative\"}}></span>\n                                        {\n                                            idxIsLoading.indexOf(idx) > -1 ? \"Loading...\" : \"Update\"\n                                        }\n                                    </button>\n                                    <button type=\"button\" className=\"btn btn-danger\" style={{marginRight: \"20px\"}}\n                                            name=\"delete\"\n                                            disabled={idxIsLoading.indexOf(idx) > -1 ? true : false}\n                                            onClick={this.handleClick}>\n                                        <span\n                                            className={`spinner-border spinner-border-sm fade ${idxIsLoading.indexOf(idx) > -1 ? \"show\" : \"d-none\"}`}\n                                            role=\"status\" aria-hidden=\"true\"\n                                            style={{right: \"5px\", position: \"relative\"}}></span>\n                                        {\n                                            idxIsLoading.indexOf(idx) > -1 ? \"Loading...\" : \"Delete\"\n                                        }\n                                    </button>\n                                </td>\n                            </tr>\n                        ))\n                    }\n                    </tbody>\n                </Table>\n            </div>\n\n\n        )\n    }\n}","import React from 'react';\nimport CardFormWrapperCustomers from \"./card-form-wrapper-customers\";\n// import {CarTable} from './table'\nimport {MyTable} from \"../common/my-table\";\nimport {requestCustomersQuery} from \"../../api\";\nimport MyPagination from \"../common/my-pagination\";\nimport MySpinner from \"../common/my-spinner\";\n\nclass PageCustomer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cardTitle: \"Add a new customer record\",\n            fields: [\"Name\", \"Phone\", \"Email\", \"Action\"],\n            keys: [\"name\", \"phone\", \"email\"],\n            customers: [],\n            currentPageCount: 1,\n            customersCount: 1,\n            isLoading: true\n        }\n    }\n\n    // fromTableToParent = (idx, action) => {\n    //     switch (action) {\n    //         case \"edit\":\n    //             break\n    //         case \"delete\":\n    //             break\n    //         default:\n    //             break\n    //     }\n    //     console.log(this.state.customers[idx])\n    //     console.log(idx, action)\n    // }\n\n    fromWrapperToParent = async (data) => {\n        // let tmp = this.state.items\n        // tmp.unshift(item)\n        // for (let i=10;i<tmp.length;i++) {\n        //     tmp.remove(i)\n        // }\n        // this.setState({...this.state, items: tmp})\n        await this.requestData(this.state.currentPageCount)\n    }\n\n    transferMsgFromPagination = async (msg) => {\n        this.setState({isLoading: true})\n        msg = parseInt(msg)\n        await this.requestData(msg)\n        this.setState({currentPageCount: msg})\n    }\n\n    requestData = async (pageCount) => {\n        this.setState({isLoading: true})\n        requestCustomersQuery({currentPageCount: pageCount}).then((r) => {\n            if (r.data.err_code === 0) {\n                this.setState({\n                    customers: r.data.customers,\n                    customersCount: r.data.customersCount,\n                    isLoading: false\n                })\n            }\n        }).catch((err) => {\n            console.log(err)\n            this.setState({\n                isLoading: false\n            })\n        })\n    }\n\n    async componentDidMount() {\n        await this.requestData(this.state.currentPageCount)\n    }\n\n    render() {\n        return (\n            <div style={{padding: \"30px\"}}>\n                <MySpinner isLoading={this.state.isLoading}></MySpinner>\n                <CardFormWrapperCustomers\n                    cardTitle={this.state.cardTitle}\n                    fromWrapperToParent={(data) => this.fromWrapperToParent(data)}>\n                </CardFormWrapperCustomers>\n                <br/>\n\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <MyTable\n                            tableRole=\"customers\"\n                            // fromTableToParent={(idx, action) => this.fromTableToParent(idx, action)}\n                            fields={this.state.fields}\n                            keys={this.state.keys}\n                            contents={this.state.customers}>\n                        </MyTable>\n                        <br/>\n                        <div className=\"row\">\n                            <MyPagination fromPaginationToParent={(msg, label) => this.transferMsgFromPagination(msg, label)}\n                                          dataPerPage={10} currentPageCount={this.state.currentPageCount}\n                                          dataCount={this.state.customersCount}></MyPagination>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PageCustomer;","import React from \"react\";\nimport {Form, Button} from \"react-bootstrap\";\nimport {MyDropdown} from \"../common/my-dropdown\";\nimport MyAlert from \"../common/my-alert\";\nimport {requestItemInsert} from \"../../api\";\n\nclass FormAdd extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userInput: {\n                name: \"\",\n                type: \"products\",\n                brand: \"\",\n                amount: \"\",\n                price: \"\"\n            },\n            isLoading: false,\n            alert: {\n                type: \"success\",\n                value: \"success\",\n                timeStamp: Date.now()\n            }\n        };\n    }\n\n    informAlert = (value, type) => {\n        let {alert} = this.state\n        alert.type = type ? type : \"warning\"\n        alert.value = value ? value : \"Error\"\n        alert.timeStamp = Date.now()\n        this.setState({alert: alert})\n    }\n\n    handleChange = (e) => {\n        let {value} = e.target\n        const key = e.target.getAttribute('name');\n        let tmp = this.state.userInput\n        tmp[key] = value\n        this.setState({...this.state, userInput: tmp})\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        // const {name, type, brand, amount, price} = this.state.userInput\n        const {userInput, alert} = this.state\n        for (let key in userInput) {\n            if (key===\"brand\" && userInput.type === \"services\") {\n                continue\n            }\n            if (!userInput[key] && userInput.type === \"products\") {\n                this.informAlert(\"One or more required fields are empty\")\n                return\n            }\n        }\n        if (userInput.type === \"products\") {\n        }\n        this.setState({isLoading: true})\n        requestItemInsert(this.state.userInput).then(r => {\n            this.setState({isLoading: false})\n            // insert suc\n            if (r.data.err_code === 0) {\n                // amount: -1\n                // brand: \"\"\n                // name: \"ubkhi\"\n                // price: 130\n                // type: \"services\"\n                // __v: 0\n                // _id: \"5f919134bf5afef228ea252b\"\n                this.props.fromFormToParent(userInput)\n                userInput.name = \"\"\n                userInput.brand = \"\"\n                if (userInput.type === \"services\") {\n                    userInput.amount = \"-1\"\n                } else {\n                    userInput.amount = \"\"\n                }\n                userInput.price = \"\"\n                alert.type = \"success\"\n                alert.value = \"Insert success\"\n                alert.timeStamp = Date.now()\n                this.setState({...this.state, userInput: userInput, isLoading: false, alert: alert})\n            } else {\n                alert.type = \"danger\"\n                alert.value = `Insert fail ${r.data.message}`\n                alert.timeStamp = Date.now()\n                this.setState({...this.state, isLoading: false, alert: alert})\n            }\n            console.log(this.state)\n            console.log(r)\n        })\n    }\n\n    transferMsg = (msg, label) => {\n        let tmp = this.state.userInput\n        tmp[label] = msg\n        if (msg === \"services\") {\n            tmp[\"brand\"] = \"\"\n            tmp[\"amount\"] = -1\n        }\n        if (msg === \"products\") {\n            tmp[\"amount\"] = \"\"\n        }\n        this.setState({...this.state, userInput: tmp})\n    }\n\n    render() {\n        const {isLoading, userInput, alert} = this.state\n        return (\n            <Form>\n                <Form.Row>\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Name</Form.Label>\n                        <input type=\"text\" className=\"form-control\" style={{textAlign: \"left\"}}\n                               onChange={this.handleChange} name=\"name\" value={userInput.name}></input>\n                    </div>\n\n                    <MyDropdown transferMsg={(msg, label) => this.transferMsg(msg, label)}\n                                data={[\"products\", \"services\"]} label=\"type\" value={userInput.type}></MyDropdown>\n\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Brand</Form.Label>\n                        <fieldset disabled={userInput.type === \"products\" ? false : true}>\n                            <input type=\"text\" className=\"form-control\"\n                                   style={{textAlign: \"left\", transition: \"all .3s\"}} onChange={this.handleChange}\n                                   name=\"brand\" value={userInput.brand}></input>\n                        </fieldset>\n                    </div>\n\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Amount</Form.Label>\n                        <fieldset disabled={userInput.type === \"products\" ? false : true}>\n                            <input type=\"number\" className=\"form-control\"\n                                   style={{textAlign: \"left\", transition: \"all .3s\"}} onChange={this.handleChange}\n                                   name=\"amount\" value={userInput.amount}></input>\n                        </fieldset>\n                    </div>\n\n                    <div className=\"col-6 col-md-3\">\n                        <Form.Label>Price</Form.Label>\n                        <input type=\"number\" className=\"form-control\" style={{textAlign: \"left\"}}\n                               onChange={this.handleChange} name=\"price\" value={userInput.price}></input>\n                    </div>\n\n                    <div className=\"col-6 col-md-1\">\n                        <Button variant=\"primary\" type=\"submit\" style={{top: \"30px\", position: \"relative\"}}\n                                disabled={isLoading ? true : false}\n                                onClick={this.handleClick}>\n                            <span className={`spinner-border spinner-border-sm fade ${isLoading ? \"show\" : \"d-none\"}`}\n                                  role=\"status\" aria-hidden=\"true\" style={{right: \"5px\", position: \"relative\"}}></span>\n                            {\n                                isLoading ? \"Loading...\" : \"Submit\"\n                            }\n                        </Button>\n                        {/*<button className=\"btn btn-primary\" type=\"button\" disabled>*/}\n                        {/*    <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>*/}\n                        {/*    Loading...*/}\n                        {/*</button>*/}\n                    </div>\n                </Form.Row>\n                <br/>\n                <Form.Row>\n                    <MyAlert type={alert.type} value={alert.value} timeStamp={alert.timeStamp} alertId=\"alert-items-form\"></MyAlert>\n                </Form.Row>\n            </Form>\n        )\n    }\n}\n\nexport default FormAdd;","import React from \"react\";\nimport FormAdd from \"./form-add\";\nimport {Card} from \"react-bootstrap\";\nimport $ from \"jquery\";\n\nclass CardFormWrapperItems extends React.Component {\n\n    handleClick = (e) => {\n        $(e.target.nextElementSibling).slideToggle();\n        $(\"#i-angle\").toggleClass(\"rotate-open\");\n    }\n\n    fromFormToParent = (item) => {\n        this.props.fromWrapperToParent(item)\n    }\n\n    render() {\n        return(\n            <Card>\n                <i id=\"i-angle\" className=\"rotate-open\"></i>\n                <h5 className=\"card-header\" onClick={this.handleClick} style={{cursor: \"pointer\"}}>&nbsp;&nbsp;&nbsp;&nbsp;Add a new products/services record</h5>\n                <Card.Body>\n                    <FormAdd fromFormToParent={(item) => this.fromFormToParent(item)}></FormAdd>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\n\nexport default CardFormWrapperItems;","import React from \"react\";\nimport CardFormWrapperItems from \"./card-form-wrapper-items\";\nimport {MyTable} from \"../common/my-table\";\nimport {requestItemsQuery} from \"../../api\";\nimport MySpinner from \"../common/my-spinner\";\nimport MyPagination from \"../common/my-pagination\";\n\nclass PageItems extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: [\"Name\", \"Type\", \"Brand\", \"Amount\", \"Price\", \"Action\"],\n            keys: [\"name\", \"type\", \"brand\", \"amount\", \"price\"],\n            items: [],\n            currentPageCount: 1,\n            itemsCount: 1,\n            isLoading: true\n        }\n    }\n\n    fromWrapperToParent = async (item) => {\n        // let tmp = this.state.items\n        // tmp.unshift(item)\n        // for (let i=10;i<tmp.length;i++) {\n        //     tmp.remove(i)\n        // }\n        // this.setState({...this.state, items: tmp})\n        await this.requestData(this.state.currentPageCount)\n    }\n\n    transferMsgFromPagination = async (msg) => {\n        msg = parseInt(msg)\n        await this.requestData(msg)\n        this.setState({currentPageCount: msg})\n    }\n\n    requestData = async (pageCount) => {\n        this.setState({isLoading: true})\n        requestItemsQuery({currentPageCount: pageCount}).then((r) => {\n            if (r.data.err_code === 0) {\n                this.setState({\n                    items: r.data.items,\n                    itemsCount: r.data.itemsCount,\n                    isLoading: false\n                })\n            }\n        }).catch((err) => {\n            this.setState({\n                isLoading: false\n            })\n            console.log(err)\n        })\n    }\n\n    async componentDidMount() {\n        await this.requestData()\n    }\n\n    render() {\n        return (\n            <div style={{padding: \"30px\"}}>\n                <MySpinner isLoading={this.state.isLoading}></MySpinner>\n                <CardFormWrapperItems\n                    fromWrapperToParent={(item) => this.fromWrapperToParent(item)}>\n                </CardFormWrapperItems>\n                <br/>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <MyTable\n                            tableRole=\"items\"\n                            fields={this.state.fields}\n                            contents={this.state.items}\n                            keys={this.state.keys}\n                        ></MyTable>\n                        <div className=\"row\">\n                            <MyPagination fromPaginationToParent={(msg) => this.transferMsgFromPagination(msg)}\n                                          dataPerPage={10}\n                                          currentPageCount={this.state.currentPageCount}\n                                          dataCount={this.state.itemsCount}></MyPagination>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PageItems;","import React from \"react\";\nimport {MyDropdown} from \"../common/my-dropdown\";\nimport {connect} from 'react-redux'\n\nclass PreRowContent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // idx: this.props.rowIdx,\n            // oriAmount: parseInt(this.props.userInput[4]),\n            // userInput: this.props.userInput\n        }\n    }\n\n    handleDropDownChange = (msg, label) => {\n        let index\n        let {userInput} = this.props\n        let preMsg = [...this.props.userInput]\n        switch (label) {\n            case \"type\":\n                index = 0\n                break\n            case \"items\":\n                index = 1\n                break\n            default:\n                break\n        }\n        userInput[index] = msg\n        if (index === 0 && msg !== preMsg[0]) {\n            if (msg === \"products\") {\n                userInput[1] = this.props.productsName[0]\n            } else {\n                userInput[1] = this.props.servicesName[0]\n            }\n        }\n        this.props.transferMsg(preMsg, userInput, this.props.rowIdx)\n    }\n\n    handleChange = (e) => {\n        let {value} = e.target\n        if (value < 0) {\n            return\n        }\n        if (!value) {\n            return\n        }\n        let preMsg = [...this.props.userInput]\n        const key = e.target.getAttribute('name');\n        let {userInput} = this.props\n        if (value > userInput[6] && userInput[0] === \"products\") {\n            return\n        }\n        switch (key) {\n            case \"amount\":\n                userInput[3] = value\n                if (userInput[0]===\"products\") {\n                    // 这里要用原剩余数量减\n                    userInput[4] = parseInt(userInput[6])- parseInt(userInput[3])\n                }\n                break\n            default:\n                break\n        }\n        userInput[5] = parseInt(userInput[2]) * parseInt(userInput[3])\n        this.props.transferMsg(preMsg, userInput, this.props.rowIdx)\n    }\n\n    handleClick = () => {\n        this.props.fromPreRowContentToParent(this.props.rowIdx)\n    }\n\n    render() {\n        let {type, productsName, servicesName} = this.props\n        let {userInput} = this.props\n        return(\n            <tr>\n                <td>\n                    <MyDropdown transferMsg={(msg, label) => this.handleDropDownChange(msg, label)} data={type} label=\"type\" value={userInput[0]} invisibleLabel={true} control={true}></MyDropdown>\n                </td>\n                <td>\n                    <MyDropdown transferMsg={(msg, label) => this.handleDropDownChange(msg, label)} data={userInput[0] === \"products\" ? productsName : servicesName} label=\"items\" value={userInput[1]} invisibleLabel={true} control={true}></MyDropdown>\n                </td>\n                <td>\n                    {userInput[2]}\n                </td>\n                <td>\n                    <input type=\"number\" className=\"form-control\" style={{textAlign: \"left\"}} onChange={this.handleChange} name=\"amount\" value={userInput[3]}></input>\n                </td>\n                <td>\n                    {userInput[4]}\n                    {/*<span name=\"remainingAmount\">*/}\n                    {/*    */}\n                    {/*</span>*/}\n                </td>\n                <td>\n                    {userInput[5]}\n                </td>\n                <td>\n                    <button type=\"button\" className=\"btn btn-outline-warning\" onClick={this.handleClick}>Remove</button>\n                </td>\n            </tr>\n        )\n    }\n}\n\nexport default connect(\n    state => ({items: state.items}),\n    {}\n)(PreRowContent)","import React from \"react\";\nimport {Table} from \"react-bootstrap\";\nimport PreRowContent from \"./preRowContent\";\nimport MyAlert from \"../common/my-alert\";\nimport {requestItemsQuery, requestSalesInsert, requestCustomersQuery, requestCarsQuery} from \"../../api\";\nimport MySpinner from \"../common/my-spinner\";\nimport {connect} from 'react-redux'\nimport {initItemsData} from \"../../redux/action\";\nimport {MyDropdown} from \"../common/my-dropdown\";\n\nclass TableAdd extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: [\"Type\", \"Item\", \"Unit Price\", \"Amount\", \"Remaining Amount\", \"Total\", \"Action\"],\n            type: [\"products\", \"services\"],\n            productsName: [],\n            servicesName: [],\n            customersName: [\"\"],\n            customersId: [\"\"],\n            plateNumber: [\"\"],\n            products: {},\n            services: {},\n            // customers: {customerId: customerName}\n            customers: {},\n            remainingLoad: 3,\n            submitIsLoading: false,\n            userInput: [],\n            currentCustomer: {\n                id: \"\",\n                name: \"\",\n                plateNumber: \"\",\n                brand: \"\",\n                model: \"\"\n            },\n            isDisableButton: false,\n            isVAT: false,\n            gross: 0,\n            VAT: 0,\n            totalPrice: 0,\n            alert: {\n                type: \"success\",\n                value: \"success\",\n                timeStamp: Date.now()\n            }\n        }\n    }\n\n    organisingItems = () => {\n        requestItemsQuery({currentPageCount: 0}).then((r) => {\n            let {data} = r\n            if (data.err_code === 0) {\n                // let {products, services, productsName, servicesName} = this.state\n                let products = {}, services = {}, productsName = [], servicesName = []\n                for (let i = 0; i < data.items.length; i++) {\n                    if (data.items[i].type === \"products\") {\n                        productsName.push(data.items[i].name)\n                        products[data.items[i].name] = {\n                            amount: data.items[i].amount,\n                            id: data.items[i]._id,\n                            brand: data.items[i].brand,\n                            price: data.items[i].price\n                        }\n                    } else {\n                        servicesName.push(data.items[i].name)\n                        services[data.items[i].name] = {\n                            amount: data.items[i].amount,\n                            id: data.items[i]._id,\n                            brand: data.items[i].brand,\n                            price: data.items[i].price\n                        }\n                    }\n                }\n                // this.props.initItemsData({\n                //     products: products,\n                //     services: services,\n                //     productsName: productsName,\n                //     servicesName: servicesName\n                // })\n                let {remainingLoad} = this.state\n                this.setState({\n                    remainingLoad: remainingLoad - 1,\n                    products: products,\n                    services: services,\n                    productsName: productsName,\n                    servicesName: servicesName,\n                })\n            } else {\n                this.requestFail(data.message)\n            }\n        }).catch((err) => {\n            this.requestFail(err)\n            console.log(err)\n        })\n    }\n\n    organisingCustomers = () => {\n        requestCustomersQuery({currentPageCount: 0}).then(async (r) => {\n            let {data} = r\n            if (data.err_code === 0) {\n                let {customers} = data\n                let customersName = []\n                let customersId = []\n                let _customers = {}\n                for (let key in customers) {\n                    customersName.push(customers[key].name)\n                    customersId.push(customers[key]._id)\n                }\n                for (let i = 0; i < customers.length; i++) {\n                    let obj = customers[i]\n                    _customers[obj._id] = {\n                        \"name\": obj.name\n                    }\n                }\n                console.log(customersName)\n                console.log(customersId)\n                let {remainingLoad} = this.state\n                await this.setState({\n                    remainingLoad: remainingLoad - 1,\n                    customers: _customers,\n                    customersName,\n                    customersId\n                })\n                this.organisingCars()\n            } else {\n                this.requestFail(data.message)\n            }\n        }).catch((err) => {\n            this.requestFail(err)\n            console.log(err)\n        })\n    }\n\n    organisingCars = () => {\n        requestCarsQuery({currentPageCount: 0}).then((r) => {\n            let {data} = r\n            // customers: {\n            //     \"customerId1\": {\n            //         \"name\": \"xxx\",\n            //         \"carPlate1\": {\n            //             \"brand\": \"xx\",\n            //             \"model\": \"xx\",\n            //         },\n            //         \"carPlate2\": {\n            //             \"brand\": \"xx\",\n            //             \"model\": \"xx\",\n            //         }\n            //     },\n            //     \"customerId2\": {\n            //         \"name\": \"xxx\",\n            //         \"carPlate3\": {\n            //             \"brand\": \"xx\",\n            //             \"model\": \"xx\",\n            //         },\n            //         \"carPlate4\": {\n            //             \"brand\": \"xx\",\n            //             \"model\": \"xx\",\n            //         }\n            //     },\n            // },\n            if (data.err_code === 0) {\n                let {cars} = data\n                // let customers = {}\n                let {remainingLoad, customersId, customers} = this.state\n                // 如果有customers\n                if (customersId.length > 0) {\n                    // 整理customers对象\n                    for (let i = 0; i < cars.length; i++) {\n                        let obj = cars[i]\n                        // if (!(obj.owner._id in customers)) {\n                        //     customers[obj.owner._id] = {}\n                        // }\n                        // customers[obj.owner._id][\"name\"] = obj.owner.name\n                        customers[obj.owner._id][obj.plateNumber] = {\n                            \"brand\": obj.brand,\n                            \"model\": obj.model\n                        }\n                    }\n                    let plateNumber = this.handleNameChange(customersId[0], customers)\n                    this.setState({\n                        remainingLoad: remainingLoad - 1,\n                        customers,\n                        plateNumber\n                    })\n                    console.log(customers, plateNumber)\n                } else {\n                    this.setState({\n                        remainingLoad: remainingLoad - 1\n                    })\n                }\n            } else {\n                this.requestFail(data.message)\n            }\n        }).catch((err) => {\n            this.requestFail(err)\n            console.log(err)\n        })\n    }\n\n    // setstate异步执行，所以要传入customers\n    handleNameChange = (customerId, customers) => {\n        let plateNumber = []\n        // 判断该customer是否有car\n        let currentCustomerCars = customers[customerId]\n        for (let key in currentCustomerCars) {\n            if (key !== \"name\") {\n                plateNumber.push(key)\n            }\n        }\n        if (plateNumber.length === 0) {\n            plateNumber.push(\"\")\n        }\n        let {currentCustomer} = this.state\n        currentCustomer.id = customerId\n        currentCustomer.name = customers[customerId].name\n        currentCustomer.plateNumber = plateNumber[0]\n        if (plateNumber[0] !== \"\") {\n            currentCustomer.brand = customers[customerId][plateNumber[0]].brand\n            currentCustomer.model = customers[customerId][plateNumber[0]].model\n        } else {\n            currentCustomer.brand = \"\"\n            currentCustomer.model = \"\"\n        }\n        this.setState({currentCustomer})\n        return plateNumber\n    }\n\n    handlePlateChange = (plateNumber) => {\n        // customers: {\n        //     \"customerId1\": {\n        //         \"name\": \"xxx\",\n        //         \"carPlate1\": {\n        //             \"brand\": \"xx\",\n        //             \"model\": \"xx\",\n        //         },\n        //         \"carPlate2\": {\n        //             \"brand\": \"xx\",\n        //             \"model\": \"xx\",\n        //         }\n        //     },\n        //     \"customerId2\": {\n        //         \"name\": \"xxx\",\n        //         \"carPlate3\": {\n        //             \"brand\": \"xx\",\n        //             \"model\": \"xx\",\n        //         },\n        //         \"carPlate4\": {\n        //             \"brand\": \"xx\",\n        //             \"model\": \"xx\",\n        //         }\n        //     },\n        // },\n\n        // currentCustomer: {\n        //     id: \"\",\n        //     name: \"\",\n        //     plateNumber: \"\",\n        //     carBrand: \"\",\n        //     carModel: \"\"\n        // }\n        let {currentCustomer, customers} = this.state\n        let customerId = currentCustomer.id\n        let customer = customers[customerId]\n        console.log(customer, plateNumber, currentCustomer)\n        currentCustomer.plateNumber = plateNumber\n        currentCustomer.brand = customer[plateNumber].brand\n        currentCustomer.model = customer[plateNumber].model\n        this.setState({currentCustomer})\n    }\n\n    requestFail = (message) => {\n        this.informAlert(`Request data fail ${message}`, \"danger\")\n        let {remainingLoad} = this.state\n        this.setState({\n            isDisableButton: true,\n            remainingLoad: remainingLoad - 1\n        })\n    }\n\n    componentDidMount() {\n        // this.setState({remainingLoad: 3})\n        this.organisingItems()\n        this.organisingCustomers()\n        // this.organisingCars()\n    }\n\n    componentWillUnmount = () => {\n        this.setState = (state, callback) => {\n        };\n    }\n\n    rollBackArray = (name, value) => {\n        let itemsArr\n        if (this.state.productsName.length === 0 && this.state.servicesName.length === 0) {\n            this.setState({isDisableButton: false})\n        }\n        switch (name) {\n            case \"products\":\n                itemsArr = this.state.productsName\n                if (itemsArr.length === 0) {\n                    let {type} = this.state\n                    type.unshift(\"products\")\n                }\n                itemsArr.push(value)\n                itemsArr = itemsArr.sort()\n                this.setState({productsName: itemsArr})\n                break;\n            case \"services\":\n                itemsArr = this.state.servicesName\n                if (itemsArr.length === 0) {\n                    let {type} = this.state\n                    type.push(\"services\")\n                }\n                itemsArr.push(value)\n                itemsArr = itemsArr.sort()\n                this.setState({servicesName: itemsArr})\n                break;\n            default:\n                break;\n        }\n    }\n\n    filterTheArray = (name, value) => {\n        let arr\n        let {productsName, servicesName, type} = this.state\n        switch (name) {\n            case \"products\":\n                arr = productsName.filter(name => name !== value)\n                if (arr.length === 0) {\n                    this.setState({type: type.filter(name => name !== \"products\")})\n                }\n                if (type.length === 1 && servicesName.length !== 0) {\n                    type.push(\"services\")\n                    this.setState({type: type})\n                }\n                this.setState({productsName: arr})\n                break;\n            case \"services\":\n                arr = servicesName.filter(name => name !== value)\n                if (arr.length === 0) {\n                    this.setState({type: type.filter(name => name !== \"services\")})\n                }\n                if (type.length === 1 && productsName.length !== 0) {\n                    type.unshift(\"products\")\n                    this.setState({type: type})\n                }\n                this.setState({servicesName: arr})\n                break;\n            default:\n                break;\n        }\n        if ((productsName.length === 1 && servicesName.length === 0) || (productsName.length === 0 && servicesName.length === 1)) {\n            this.setState({\n                isDisableButton: true\n            })\n        }\n    }\n\n    handleClick = () => {\n        let {userInput, productsName, servicesName, products, services} = this.state\n        let type\n\n        let name\n        let remainingAmount\n        let price\n        if (productsName.length !== 0) {\n            type = \"products\"\n            name = productsName[0] ? productsName[0] : \"\"\n            remainingAmount = products[name].amount ? products[name].amount : 0\n            price = products[name].price ? products[name].price : 0\n        } else if (servicesName.length !== 0) {\n            type = \"services\"\n            name = servicesName[0] ? servicesName[0] : \"\"\n            remainingAmount = services[name].amount ? services[name].amount : 0\n            price = services[name].price ? services[name].price : 0\n        } else {\n            return\n        }\n        // 6: totalAmount\n        userInput.push([type, name, price, 0, remainingAmount, price * 0, remainingAmount])\n        this.filterTheArray(type, name)\n        let arr = this.calculateTotalPrice(userInput, this.state.isVAT)\n        this.setState({\n            userInput: userInput,\n            gross: arr[0],\n            VAT: arr[1],\n            totalPrice: arr[2]\n        })\n    }\n\n    handleSubmit = () => {\n        let itemsId = \"\",\n            itemsName = \"\",\n            amount = \"\",\n            unitPrice = \"\",\n            price = \"\",\n            remainingAmount = \"\"\n        let {userInput, products, services, totalPrice, currentCustomer} = this.state\n        if (userInput.length === 0) {\n            this.informAlert(\"The form is empty\")\n            return\n        }\n        for (let i = 0; i < userInput.length; i++) {\n            if (userInput[i][3] === 0) {\n                this.informAlert(\"The amount should be at least 1\")\n                return\n            }\n            switch (userInput[i][0]) {\n                case \"products\":\n                    itemsId += `${products[userInput[i][1]].id},`\n                    itemsName += `${userInput[i][1]},`\n                    break\n                case \"services\":\n                    itemsId += `${services[userInput[i][1]].id},`\n                    itemsName += `${userInput[i][1]},`\n                    break\n                default:\n                    this.informAlert(\"Please check your data\")\n                    return\n            }\n            unitPrice += `${userInput[i][2]},`\n            amount += `${[userInput[i][3]]},`\n            remainingAmount += `${[userInput[i][4]]},`\n            price += `${userInput[i][5]},`\n        }\n        if (!currentCustomer.name) {\n            this.informAlert(\"The customer name is empty\")\n            return\n        }\n        itemsId = itemsId.substring(0, itemsId.length - 1)\n        itemsName = itemsName.substring(0, itemsName.length - 1)\n        remainingAmount = remainingAmount.substring(0, remainingAmount.length - 1)\n        amount = amount.substring(0, amount.length - 1)\n        unitPrice = unitPrice.substring(0, unitPrice.length - 1)\n        price = price.substr(0, price.length - 1)\n        let sales = {\n            itemsId, itemsName, amount, remainingAmount, unitPrice, price, totalPrice, ...currentCustomer\n        }\n        console.log(sales)\n        this.setState({remainingLoad: 3})\n        requestSalesInsert(sales).then((r) => {\n            if (r.data.err_code === 0) {\n                this.informAlert(\"Insert success\", \"success\")\n                let {userInput} = this.state\n                for (let i = 0; i < userInput.length; i++) {\n                    this.rollBackArray(userInput[i][0], userInput[i][1])\n                }\n                userInput.splice(0, userInput.length)\n                this.setState({userInput: userInput, gross: 0, VAT: 0, totalPrice: 0,})\n            } else {\n                // 服务器返回错误\n                this.requestFail(r.data.message)\n            }\n            this.componentDidMount()\n            // this.setState({isLoading: false})\n        }).catch((err) => {\n            this.requestFail(err)\n            console.log(err)\n        })\n    }\n\n    handleChange = (e) => {\n        let isVAT = e.target.checked\n        this.setState(prevState => {\n            let tmp = Object.assign({}, prevState);\n            let arr = this.calculateTotalPrice(tmp[\"userInput\"], isVAT)\n            tmp[\"isVAT\"] = isVAT\n            tmp[\"gross\"] = arr[0]\n            tmp[\"VAT\"] = arr[1]\n            tmp[\"totalPrice\"] = arr[2]\n            return tmp;\n        })\n    }\n\n    informAlert = (value, type) => {\n        let {alert} = this.state\n        alert.type = type ? type : \"warning\"\n        alert.value = value ? value : \"Error\"\n        alert.timeStamp = Date.now()\n        this.setState({alert: alert})\n    }\n\n    transferMsg = (preMsg, newMsg, idx) => {\n        let {userInput, products, services} = this.state\n        let type = newMsg[0]\n        // let name = newMsg[1]\n        let item\n        switch (type) {\n            case \"products\":\n                item = products\n                break\n            case \"services\":\n                item = services\n                break\n            default:\n                break\n        }\n        // 接收type和name更新对应的userInput[idx]\n        // 情况一：数量值更新\n        userInput[idx][0] = newMsg[0]\n        userInput[idx][1] = newMsg[1]\n        if (preMsg[0] === newMsg[0] && preMsg[1] === newMsg[1]) {\n            userInput[idx][2] = newMsg[2]\n            userInput[idx][3] = newMsg[3]\n            userInput[idx][4] = newMsg[4]\n            userInput[idx][5] = newMsg[5]\n            userInput[idx][6] = newMsg[6]\n        } else {\n            // 情况二：下拉更新\n            // Unit Price\tAmount\tRemaining Amount\tTotal\n            userInput[idx][2] = item[newMsg[1]].price\n            userInput[idx][3] = 0\n            userInput[idx][4] = item[newMsg[1]].amount\n            userInput[idx][5] = item[newMsg[1]].price * 0\n            userInput[idx][6] = item[newMsg[1]].amount\n            // roll back\n            this.rollBackArray(preMsg[0], preMsg[1])\n            // filter\n            this.filterTheArray(newMsg[0], newMsg[1])\n        }\n        let arr = this.calculateTotalPrice(userInput, this.state.isVAT)\n        this.setState({\n            userInput: userInput,\n            gross: arr[0],\n            VAT: arr[1],\n            totalPrice: arr[2]\n        })\n    }\n\n    handleDropDownChange = (msg, label, id) => {\n        let {customers} = this.state\n        switch (label) {\n            case \"owner\":\n                let plateNumber = this.handleNameChange(id, customers)\n                this.setState({plateNumber})\n                break\n            case \"plate\":\n                this.handlePlateChange(msg)\n                break\n            default:\n                break\n        }\n    }\n\n    fromPreRowContentToParent = (idx) => {\n        let {userInput} = this.state\n        this.rollBackArray(userInput[idx][0], userInput[idx][1])\n        userInput.splice(idx, 1)\n        console.log(userInput)\n        if (userInput.length === 0) {\n            this.setState({gross: 0, VAT: 0, totalPrice: 0,})\n        }\n        this.setState({userInput: userInput})\n    }\n\n    calculateTotalPrice = (arr, isVAT) => {\n        let totalPrice = 0;\n        let VAT;\n        arr.map((item) => {\n            totalPrice += parseFloat(item[5])\n        })\n        if (isVAT) {\n            VAT = (totalPrice / 107) * 7\n            return [(totalPrice - VAT).toFixed(2), VAT.toFixed(2), totalPrice.toFixed(2)]\n        }\n        return [totalPrice.toFixed(2), 0, totalPrice.toFixed(2)]\n    }\n\n    render() {\n        let {userInput, gross, VAT, totalPrice, isDisableButton, remainingLoad, alert, currentCustomer, customersId, customersName, carsName, modelsName, plateNumber} = this.state\n        return (\n            <div>\n                <MySpinner isLoading={remainingLoad === 0 ? false : true}></MySpinner>\n                <div className=\"row\">\n                    <div className=\"col-xl-3\">\n                        <MyDropdown transferMsg={(msg, label, id) => this.handleDropDownChange(msg, label, id)}\n                                    dataId={customersId}\n                                    data={customersName} label=\"owner\" value={currentCustomer.name}\n                                    control={true}></MyDropdown>\n                    </div>\n                    <div className=\"col-xl-3\">\n                        <MyDropdown transferMsg={(msg, label) => this.handleDropDownChange(msg, label)}\n                                    data={plateNumber} label=\"plate\" value={currentCustomer.plateNumber}\n                                    control={true}></MyDropdown>\n                    </div>\n                    <div className=\"col-xl-3\">\n                        <MyDropdown transferMsg={(msg, label) => this.handleDropDownChange(msg, label)}\n                                    data={[\"a\", \"b\"]} label=\"carBrand\" value={currentCustomer.brand} control={true}\n                                    disabled={true}></MyDropdown>\n                    </div>\n                    <div className=\"col-xl-3\">\n                        <MyDropdown transferMsg={(msg, label) => this.handleDropDownChange(msg, label)}\n                                    data={[\"a\", \"b\"]} label=\"carModel\" value={currentCustomer.model}\n                                    control={true} disabled={true}></MyDropdown>\n                    </div>\n                </div>\n                <br/>\n                <div className=\"text-right\">\n                    <button type=\"button\" className=\"btn btn-light\" style={{marginRight: \"20px\"}}>SAVE&PRINT\n                    </button>\n                    <button className=\"btn btn-dark\" type=\"submit\" style={{position: \"relative\"}}\n                            disabled={remainingLoad === 0 ? false : true}\n                            onClick={this.handleSubmit}>\n                            <span\n                                className={`spinner-border spinner-border-sm fade ${remainingLoad === 0 ? \"d-none\" : \"show\"}`}\n                                role=\"status\" aria-hidden=\"true\" style={{right: \"5px\", position: \"relative\"}}></span>\n                        {\n                            remainingLoad === 0 ? \"SAVE\" : \"Loading...\"\n                        }\n                    </button>\n                </div>\n                <br/>\n                <Table hover responsive>\n                    <thead>\n                    <tr className=\"thead-dark\">\n                        {\n                            this.state.fields.map(\n                                (item, idx) => (\n                                    <th key={idx} style={{width: \"14.2%\"}}>{item}</th>\n                                )\n                            )\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        userInput.map(\n                            (item, idx) => (\n                                <PreRowContent key={idx} rowIdx={idx}\n                                               transferMsg={(preMsg, newMsg, idx) => this.transferMsg(preMsg, newMsg, idx)}\n                                               fromPreRowContentToParent={(idx) => this.fromPreRowContentToParent(idx)}\n                                               type={this.state.type}\n                                               productsName={this.state.productsName}\n                                               servicesName={this.state.servicesName}\n                                               productsItems={this.state.products}\n                                               servicesItems={this.state.services}\n                                               userInput={item}></PreRowContent>\n                            )\n                        )\n                    }\n                    <tr className=\"table-secondary\">\n                        <td colSpan=\"6\" className=\"text-right\">Gross:</td>\n                        <td>{gross}</td>\n                    </tr>\n                    <tr className=\"table-secondary\">\n                        <td colSpan=\"6\" className=\"text-right\">\n                            <input type=\"checkbox\" style={{marginRight: \"10px\"}} onChange={this.handleChange}/>\n                            VAT:\n                        </td>\n                        <td>{VAT}</td>\n                    </tr>\n                    <tr className=\"table-secondary\">\n                        <td colSpan=\"6\" className=\"text-right\">Total Price:</td>\n                        <td>{totalPrice}</td>\n                    </tr>\n                    </tbody>\n                </Table>\n                <div>\n                    <button type=\"button\" className=\"btn btn-primary\" disabled={isDisableButton}\n                            onClick={this.handleClick}>Add a new row\n                    </button>\n                </div>\n                <br/>\n                <div>\n                    <MyAlert type={alert.type} value={alert.value} timeStamp={alert.timeStamp}\n                             alertId=\"alert-table-add\"></MyAlert>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({items: state.items}),\n    {initItemsData}\n)(TableAdd)","import React from \"react\";\nimport {Card} from \"react-bootstrap\";\nimport $ from \"jquery\";\nimport TableAdd from \"./table-add\";\n\nexport default class CardFormWrapperSales extends React.Component {\n\n    handleClick = (e) => {\n        $(e.target.nextElementSibling).slideToggle();\n        $(\"#i-angle\").toggleClass(\"rotate-open\");\n    }\n\n    render() {\n        return (\n            <Card>\n                <i id=\"i-angle\" className=\"rotate-open\"></i>\n                <h5 className=\"card-header\" onClick={this.handleClick}\n                    style={{cursor: \"pointer\"}}>&nbsp;&nbsp;&nbsp;&nbsp;Add a new sales record</h5>\n                <Card.Body>\n                    <TableAdd></TableAdd>\n                </Card.Body>\n            </Card>\n        );\n    }\n}","import React from \"react\";\nimport CardFormWrapperSales from \"./card-form-wrapper-sales\";\n// import Header from \"../header/header\";\n\nexport default class PageSales extends React.Component {\n    render() {\n        return (\n            <div style={{padding: \"30px\"}}>\n                <CardFormWrapperSales></CardFormWrapperSales>\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nimport {Line} from \"react-chartjs-2\";\n\nexport default class LineChart extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const data = {\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Sep\", \"Dec\"],\n            datasets: [\n                {\n                    label: \"Monthly sales\",\n                    data: this.props.data,\n                    fill: false,\n                    borderColor: \"#742774\"\n                }\n            ]\n        }\n        return (\n            <Line key={this.props.flag} data={data}/>\n        );\n    }\n}","import React from \"react\";\n\nimport {Bar} from \"react-chartjs-2\";\n\nconst options = {\n    scales: {\n        yAxes: [\n            {\n                ticks: {\n                    beginAtZero: true,\n                },\n            },\n        ],\n    },\n}\n\nexport default class BarChart extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const data = {\n            labels: this.props.data.names,\n            datasets: [\n                {\n                    label: 'Top sold items in this year',\n                    data: this.props.data.amounts,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)',\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)',\n                    ],\n                    borderWidth: 1,\n                },\n            ],\n        }\n\n        return (\n            <Bar key={this.props.flag} data={data} options={options}/>\n        );\n    }\n}","import React from \"react\";\nimport {Card} from \"react-bootstrap\";\nimport $ from \"jquery\";\nimport LineChart from \"./line-chart\";\nimport BarChart from \"./bar-chart\";\n\nexport default class CardCharts extends React.Component {\n    handleClick = (e) => {\n        $(e.target.nextElementSibling).slideToggle();\n        $(\"#i-angle\").toggleClass(\"rotate-open\");\n    }\n\n    render() {\n        let {flag} = this.props\n        return (\n            <Card>\n                <i id=\"i-angle\" className=\"rotate-open\"></i>\n                <h5 className=\"card-header\" onClick={this.handleClick}\n                    style={{cursor: \"pointer\"}}>&nbsp;&nbsp;&nbsp;&nbsp;Charts</h5>\n                <div className=\"row row-cols-1 row-cols-md-2\" style={{padding: \"30px\"}}>\n                    <div className=\"col mb-4\">\n                        <div className=\"card\">\n                            <LineChart flag={flag} data={this.props.lineChartData}></LineChart>\n                        </div>\n                    </div>\n                    <div className=\"col mb-4\">\n                        <div className=\"card\">\n                            <BarChart flag={flag} data={this.props.barChartData}></BarChart>\n                        </div>\n                    </div>\n                </div>\n            </Card>\n        )\n    }\n}\n","export const timeStampToDate = (date) => {\n    date = new Date(date);//如果date为13位不需要乘1000\n    let Y = date.getFullYear() + '-';\n    let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\n    let D = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate()) + ' ';\n    let h = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';\n    let m = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';\n    let s = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());\n    return Y + M + D + h + m + s;\n}","import React from \"react\";\nimport CardCharts from \"./card-charts\";\nimport {requestSalesQuery} from \"../../api\";\nimport MyPagination from \"../common/my-pagination\";\nimport DatePicker from 'react-date-picker';\nimport MySpinner from \"../common/my-spinner\";\nimport MyAlert from \"../common/my-alert\";\nimport {Media, Modal, Button, Table, ListGroup} from 'react-bootstrap';\nimport {timeStampToDate} from \"../../utils/timeUtils\";\n\nexport default class PageSalesReport extends React.Component {\n    constructor(props) {\n        super(props);\n        let date = new Date()\n        this.state = {\n            // Date/Time | Customer Name | Car Brand/Model/Number | Price\n            fields: [\"Date/time\", \"Customer Name\", \"Car Brand\", \"Model\", \"Number\", \"Price\", \"\"],\n            keys: [\"name\", \"type\", \"brand\", \"amount\", \"price\"],\n            // Date/time\tCustomer Name\tCar Brand\tModel\tNumber\tPrice\n            currentRow: 0,\n            items: [],\n            currentPageCount: 1,\n            startDate: new Date(date.getFullYear(), 0, 1),\n            endDate: new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1),\n            itemsCount: 1,\n            flag: 0,\n            isLoading: false,\n            arrLineChartData: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            objBarChartData: {\n                names: [\"\", \"\", \"\", \"\", \"\"],\n                amounts: [0, 0, 0, 0, 0]\n            },\n            modalShow: false,\n            alert: {\n                type: \"success\",\n                value: \"success\",\n                timeStamp: Date.now()\n            }\n        }\n    }\n\n    requestData = (currentPageCount) => {\n        this.setState({isLoading: true})\n        let {startDate, endDate} = this.state\n        requestSalesQuery({\n            currentPageCount: currentPageCount,\n            startTimeStamp: startDate.getTime(),\n            endTimeStamp: endDate.getTime()\n        }).then((r) => {\n            if (r.data.err_code === 0) {\n                let {sales} = r.data\n                // this.setState({\n                //     itemsCount: sales.length\n                // })\n                // 第一次请求:\n                if (currentPageCount === 0) {\n                    this.organisingChartData(sales)\n                }\n                // 如果第一次请求数据长度大于10:\n                if (sales.length > 10) {\n                    sales.splice(10)\n                    this.organisingTableData(sales)\n                } else {\n                    this.organisingTableData(sales)\n                }\n            } else {\n                console.log(r.data.message)\n                this.informAlert(`Request data fail ${r.data.message}`)\n            }\n            this.setState({isLoading: false, itemsCount: r.data.totalCount})\n        }).catch((err) => {\n            console.log(err)\n            this.informAlert(`Request data fail ${err}`)\n            this.setState({isLoading: false})\n        })\n    }\n\n    organisingChartData = (data) => {\n        let {arrLineChartData, objBarChartData, flag} = this.state\n        let tmp = {}\n        for (let i = 0; i < data.length; i++) {\n            let date = new Date(data[i].createdTimeStamp)\n            arrLineChartData[date.getMonth()] += data[i].totalPrice\n            let {items} = data[i]\n            for (let key in items) {\n                if (!(key in tmp)) {\n                    tmp[key] = 0\n                }\n                tmp[key] += parseInt(items[key].amount)\n            }\n        }\n        let sortedItemsName = Object.keys(tmp).sort((a, b) => (tmp[b] - tmp[a]))\n        if (sortedItemsName.length > 5) {\n            sortedItemsName.splice(5)\n        }\n        let itemsSoldAmount = []\n        for (let i = 0; i < sortedItemsName.length; i++) {\n            let key = sortedItemsName[i]\n            itemsSoldAmount.push(tmp[key])\n        }\n        objBarChartData = {names: sortedItemsName, amounts: itemsSoldAmount}\n        flag+=1\n        this.setState({arrLineChartData, objBarChartData, flag: flag})\n    }\n\n    organisingTableData = (data) => {\n        let items = []\n        for (let i = 0; i < data.length; i++) {\n            let tmp = {dateTime: \"\", name: \"\", brand: \"\", model: \"\", plateNumber: \"\", price: \"\", items: {}}\n            tmp.dateTime = data[i].createdTimeStamp\n            tmp.name = data[i].customer.name\n            tmp.brand = data[i].customer.brand\n            tmp.model = data[i].customer.model\n            tmp.plateNumber = data[i].customer.plateNumber\n            tmp.price = data[i].totalPrice\n            tmp.items = data[i].items\n            items.push(tmp)\n        }\n        this.setState({items})\n        console.log(items)\n    }\n\n    componentDidMount() {\n        this.requestData(0)\n    }\n\n    handleStartDateChange = (value) => {\n        this.setState({startDate: new Date(value.getFullYear(), value.getMonth(), value.getDate())})\n    }\n\n    handleEndDateChange = (value) => {\n        this.setState({endDate: new Date(value.getFullYear(), value.getMonth(), value.getDate())})\n    }\n\n    handleSubmit = () => {\n        let {currentPageCount} = this.state\n        this.requestData(currentPageCount)\n    }\n\n    toggleModal = () => {\n        let {modalShow} = this.state\n        this.setState({modalShow: !modalShow})\n    }\n\n    handleRowClick = async (e) => {\n        await this.setState({currentRow: e.target.getAttribute(\"rowid\")})\n        this.toggleModal()\n    }\n\n    handleModalHide = () => {\n        this.toggleModal()\n    }\n\n    informAlert = (value, type) => {\n        let {alert} = this.state\n        alert.type = type ? type : \"warning\"\n        alert.value = value ? value : \"Error\"\n        alert.timeStamp = Date.now()\n        this.setState({alert: alert})\n    }\n\n    transferMsgFromPagination = async (msg) => {\n        this.setState({isLoading: true})\n        msg = parseInt(msg)\n        await this.requestData(msg)\n        this.setState({currentPageCount: msg})\n    }\n\n    render() {\n        const {flag, isLoading, startDate, endDate, alert, arrLineChartData, objBarChartData, items, fields, modalShow, currentRow} = this.state\n        let date = new Date()\n        // const [, ] = React.useState(false);\n        function MyVerticallyCenteredModal(props) {\n            let {data} = props\n            let items\n            if (data) {\n                items = data.items\n            }\n            return (\n                <Modal\n                    {...props}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title id=\"contained-modal-title-vcenter\" className=\"row\">\n                        </Modal.Title>\n                    </Modal.Header>\n                    <h5>\n                        <li className=\"list-group-item list-group-item-info\">Customer\n                        Name: {data ? data.name : \"\"}</li>\n                    </h5>\n                    <Modal.Body>\n                        <h4>Date: {data ? timeStampToDate(data.dateTime) : \"\"}</h4>\n                        <ListGroup.Item action variant=\"light\">\n                            Car Brand: {data ? data.brand : \"\"}\n                        </ListGroup.Item>\n                        <ListGroup.Item action variant=\"light\">\n                            Car Model: {data ? data.model : \"\"}\n                        </ListGroup.Item>\n                        <ListGroup.Item action variant=\"light\">\n                            Plate Number: {data ? data.plateNumber : \"\"}\n                        </ListGroup.Item>\n                        <Table hover responsive className=\"text-center\">\n                            <thead>\n                            <tr>\n                                <th>Item Name</th>\n                                <th>Item Amount</th>\n                                <th>Item Price</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {\n                                items ?\n                                    Object.keys(items).map((key, idx) => (\n                                        <tr key={idx}>\n                                            <td>{key}</td>\n                                            <td>{items[key].amount}</td>\n                                            <td>{items[key].price}</td>\n                                        </tr>\n                                    ))\n                                    :\n                                    \"\"\n                            }\n                            <tr>\n                                <td colSpan={3} className=\"text-right\"><b>Total Price: {data ? data.price : \"\"}</b></td>\n                            </tr>\n                            </tbody>\n                        </Table>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button onClick={props.onHide}>Close</Button>\n                    </Modal.Footer>\n                </Modal>\n            );\n        }\n\n        return (\n            <div style={{padding: \"30px\"}}>\n                <MySpinner isLoading={isLoading}></MySpinner>\n                <CardCharts flag={flag} lineChartData={arrLineChartData} barChartData={objBarChartData}></CardCharts>\n                <br/>\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <div className=\"row text-center\" style={{marginBottom: \"20px\"}}>\n                            <div className=\"col-lg-4\" style={{marginTop: \"20px\"}}>\n                                {/*最大不能大过今天*/}\n                                start date:&nbsp;\n                                <DatePicker\n                                    name=\"start\"\n                                    clearIcon={null}\n                                    disabled={isLoading}\n                                    onChange={this.handleStartDateChange}\n                                    maxDate={new Date()}\n                                    value={startDate}\n                                />\n                            </div>\n                            <div className=\"col-lg-4\" style={{marginTop: \"20px\"}}>\n                                {/*最小不能小过起始*/}\n                                end date:&nbsp;\n                                <DatePicker\n                                    name=\"end\"\n                                    clearIcon={null}\n                                    disabled={isLoading}\n                                    onChange={this.handleEndDateChange}\n                                    minDate={startDate}\n                                    maxDate={new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1)}\n                                    value={endDate}\n                                />\n                            </div>\n                            <div className=\"col-lg-4\" style={{marginTop: \"20px\"}}>\n                                <button className=\"btn btn-primary btn-group-lg\" type=\"submit\"\n                                        style={{position: \"relative\"}}\n                                        disabled={isLoading ? true : false}\n                                        onClick={this.handleSubmit}>\n                            <span className={`spinner-border spinner-border-sm fade ${isLoading ? \"show\" : \"d-none\"}`}\n                                  role=\"status\" aria-hidden=\"true\" style={{right: \"5px\", position: \"relative\"}}></span>\n                                    {\n                                        isLoading ? \"Loading...\" : \"QUERY\"\n                                    }\n                                </button>\n                            </div>\n                        </div>\n                        <MyAlert type={alert.type} value={alert.value} timeStamp={alert.timeStamp}\n                                 alertId=\"alert-sales-table\"></MyAlert>\n                        <Table hover responsive>\n                            <thead>\n                            <tr className=\"thead-dark text-center\" width={`${100 / fields.length}%`}>\n                                {\n                                    fields.map((item, idx) => (<th key={idx}>{item}</th>))\n                                }\n                            </tr>\n                            </thead>\n                            <tbody className=\"text-center\">\n                            {\n                                items.map((item, idx) => (\n                                    <tr key={idx}>\n                                        <td>{timeStampToDate(item.dateTime)}</td>\n                                        <td>{item.name}</td>\n                                        <td>{item.brand}</td>\n                                        <td>{item.model}</td>\n                                        <td>{item.plateNumber}</td>\n                                        <td>{item.price}</td>\n                                        <td><Button rowid={idx} variant=\"info\"\n                                                    onClick={this.handleRowClick}>\n                                            Detail</Button></td>\n                                    </tr>\n                                ))\n                            }\n                            </tbody>\n                        </Table>\n                        <MyVerticallyCenteredModal\n                            data={items[currentRow]}\n                            show={modalShow}\n                            onHide={this.handleModalHide}\n                        />\n                        <div className=\"row\">\n                            <MyPagination fromPaginationToParent={(msg) => this.transferMsgFromPagination(msg)}\n                                          dataPerPage={10}\n                                          currentPageCount={this.state.currentPageCount}\n                                          dataCount={this.state.itemsCount}></MyPagination>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react'\nimport './App.css'\nimport Header from './components/header/header'\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport PageCars from \"./components/cars/page-cars\"\nimport PageCustomer from \"./components/customers/page-customers\"\nimport PageItems from \"./components/items/page-items\"\nimport PageSales from \"./components/sales/page-sales\"\nimport PageSalesReport from \"./components/sales-report/page-sales-report\";\nimport {connect} from 'react-redux'\nimport storageUtils from \"./utils/storageUtils\"\n\nclass App extends React.Component {\n\n    render() {\n        const {user} = this.props.user\n        let userid = user ? user._id : storageUtils.getUserId()\n        if (!userid) {\n            return <Redirect to='/login'/>\n        }\n        return (\n            <div className=\"main\">\n                <Header/>\n                <Switch>\n                    {/*<DefaultRoute handler={PageSales}/>*/}\n                    <Route path='/sales' component={PageSales}/>\n                    <Route path='/sales_report' component={PageSalesReport}/>\n                    <Route path='/cars' component={PageCars}/>\n                    <Route path='/customers' component={PageCustomer}/>\n                    <Route path='/items' component={PageItems}/>\n                    <Redirect to='/sales_report'/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({user: state.user}),\n    {}\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport {login} from \"../redux/action\"\nimport {Button} from \"react-bootstrap\";\nimport {connect} from 'react-redux'\nimport MyAlert from \"../components/common/my-alert\";\nimport storageUtils from \"../utils/storageUtils\"\nimport {Redirect} from 'react-router-dom'\n\n// import {Redirect} from 'react-router-dom'\n\nclass PageLogin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: \"\",\n            username: \"\",\n            password: \"\",\n            isChecked: false,\n            isLoading: false,\n            alert: {\n                type: \"success\",\n                value: \"success\",\n                timeStamp: Date.now()\n            }\n        }\n    }\n\n    componentWillUnmount = () => {\n        this.setState = (state, callback) => {\n            return;\n        };\n    }\n\n    informAlert = (value, type) => {\n        let {alert} = this.state\n        alert.type = type ? type : \"warning\"\n        alert.value = value ? value : \"Error\"\n        alert.timeStamp = Date.now()\n        this.setState({alert: alert})\n    }\n\n    handleChange = (e) => {\n        let key = e.target.getAttribute(\"name\")\n        let value = e.target.value\n        if (key === \"isChecked\") {\n            value = this.state.isChecked ? false : true\n        }\n        this.setState({[key]: value})\n    }\n\n    handleClick = async (e) => {\n        e.preventDefault()\n        if (e.target.getAttribute(\"name\") === \"guest\") {\n            await this.setState({username: \"guest\", password: \"00000000\"})\n        }\n        const {username, password} = this.state\n        if (!username || !password) {\n            this.informAlert(\"One or more required fields are empty\")\n            return\n        }\n        this.setState({isLoading: true})\n        // 发请求redux更新user\n        await this.props.login(this.state)\n        // 读取新的props.user\n        const {user} = this.props\n        // err_code: 1\n        // message: \"Username or password is wrong\"\n        console.log(user)\n        if (user.err_code === 0) {\n            let {isChecked} = this.state\n            if (isChecked) {\n                storageUtils.saveUserId(user.user._id)\n            }\n            this.informAlert(\"Login success\", \"success\")\n            this.props.history.replace('/')\n        } else {\n            this.informAlert(`Login fail ${user.message}`, \"danger\")\n        }\n        this.setState({isLoading: false})\n    }\n\n    enterTriggerSearch = async (e) => {\n        if(e.keyCode === 13) {\n            await this.handleClick(e)\n        }\n    }\n\n    render() {\n        const {isLoading, alert} = this.state\n        const {user} = this.props.user\n        let userid = user ? user._id : storageUtils.getUserId()\n        if (userid) {\n            return <Redirect to='/sales'/>\n        }\n        return (\n            <div className=\"container\" style={{marginTop: \"200px\"}}>\n                <div className=\"card text-center\">\n                    <div className=\"card-header\">\n                        Login\n                    </div>\n                    <div className=\"card-body\">\n                        <div className=\"container\">\n                            <div className=\"panel panel-default\">\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">Please login</h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <fieldset>\n                                        <div className=\"form-group\">\n                                            <input className=\"form-control\" placeholder=\"Username\" name=\"username\"\n                                                   disabled={isLoading}\n                                                   type=\"text\" value={this.state.username}\n                                                   onChange={this.handleChange}/>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <input className=\"form-control\" placeholder=\"Password\" name=\"password\"\n                                                   disabled={isLoading}\n                                                   type=\"password\" value={this.state.password}\n                                                   onChange={this.handleChange}\n                                                   onKeyUp={this.enterTriggerSearch}\n                                            />\n                                        </div>\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input name=\"isChecked\" type=\"checkbox\" checked={this.state.isChecked}\n                                                       disabled={isLoading}\n                                                       onChange={this.handleChange} value=\"Remember Me\"/> Remember Me\n                                            </label>\n                                        </div>\n                                        <Button className=\"btn btn-lg btn-block\" variant=\"primary\" type=\"submit\"\n                                                name=\"login\"\n                                                style={{position: \"relative\"}}\n                                                disabled={isLoading ? true : false}\n                                                onClick={this.handleClick}>\n                                            <span\n                                                className={`spinner-border spinner-border-sm fade ${isLoading ? \"show\" : \"d-none\"}`}\n                                                role=\"status\" aria-hidden=\"true\"\n                                                style={{right: \"5px\", position: \"relative\"}}></span>\n                                            {\n                                                isLoading ? \"Loading...\" : \"Login\"\n                                            }\n                                        </Button>\n                                        <Button className=\"btn btn-lg btn-block\" variant=\"success\" type=\"submit\"\n                                                name=\"guest\"\n                                                style={{position: \"relative\"}}\n                                                disabled={isLoading ? true : false}\n                                                onClick={this.handleClick}>\n                                            <span\n                                                className={`spinner-border spinner-border-sm fade ${isLoading ? \"show\" : \"d-none\"}`}\n                                                role=\"status\" aria-hidden=\"true\"\n                                                style={{right: \"5px\", position: \"relative\"}}></span>\n                                            {\n                                                isLoading ? \"Loading...\" : \"Login as guest\"\n                                            }\n                                        </Button>\n                                        {/*<input className=\"btn btn-lg btn-success btn-block\" type=\"submit\"*/}\n                                        {/*       value=\"Login\" onClick={this.handleClick}/>*/}\n                                    </fieldset>\n                                    <br/>\n                                    <MyAlert type={alert.type} value={alert.value} timeStamp={alert.timeStamp}\n                                             alertId=\"alert-login-form\"></MyAlert>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => ({user: state.user}),\n    {login}\n)(PageLogin)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {HashRouter, Switch, Route} from 'react-router-dom'\nimport thunk from 'redux-thunk'\nimport {createStore, compose, applyMiddleware} from \"redux\";\nimport {Provider} from 'react-redux'\nimport reducer from \"./redux/reducer\";\nimport PageLogin from \"./pages/page-login\";\n\nconst store = createStore(reducer, compose(\n    applyMiddleware(thunk), //解决redux异步问题\n    window.devToolsExtension ? window.devToolsExtension() : f => f // chrome控制台redux工具\n))\n\nReactDOM.render(\n    // <React.StrictMode>\n    <Provider store={store}>\n        <HashRouter>\n            <Switch>\n                <Route path='/login' component={PageLogin}></Route>\n                <Route component={App}></Route>\n            </Switch>\n        </HashRouter>\n    </Provider>,\n// </React.StrictMode>,\n    document.getElementById('root')\n)\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}